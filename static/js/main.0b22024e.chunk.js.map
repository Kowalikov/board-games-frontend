{"version":3,"sources":["Game/Game.js","LogPanel/LogPanel.js","RegistrationPanel/RegistrationPanel.js","Games/warcaby/warcaby.js","Games/szachy/szachy.js","Games/tictactoe/tictactoe.js","GamesMatching/Room/Room.js","GamesMatching/GameMatching.js","App.js","serviceWorker.js","index.js"],"names":["Game","console","log","this","props","name","gameURL","history","push","className","onClick","event","clicked","to","playersNumber","src","img","alt","children","Component","withRouter","LogPanel","loading","submitting","type","onChange","changedUsername","onKeyPress","enterLogin","submit","disabled","style","marginRight","wrongLoginData","color","gotoRegister","RegistrationPanel","_handleKeyDown","e","key","register","enterRegister","unavaliableUsername","gotoLogin","Warcaby","Szachy","Square","value","Board","i","squares","renderSquare","Tictactoe","state","Array","fill","stepNumber","xIsNext","slice","length","calculateWinner","setState","concat","step","status","current","winner","moves","map","move","desc","jumpTo","handleClick","lines","a","b","c","Room","gameId","gameName","id","playersArray","players","maxPlayers","playerNameId","isMatchJoined","userId","roomURL","toString","article","url","data","fetch","method","mode","cache","headers","body","JSON","stringify","response","postData","then","isJoinedMatch","window","alert","location","replace","game","clickedJoin","clickedLeave","GameMatching","games","matches","matchesListLoaded","axios","defaults","common","get","reload","matchesList","room","index","matchPasser","clickedCreateRoom","App","users","usersLoaded","gamesListLoaded","isLogged","isRegistered","wantRegister","username","password","charCode","submitRegisterHandler","submitLoginHandler","user","logData","target","imgUrl","GameMatcher","gamesParams","path","exact","component","usernameChangeHandler","enterLoginHandler","gotoRegisterHandler","enterRegisterHandler","gotoLoginHandler","Boolean","hostname","match","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6aAUMA,E,wKAGEC,QAAQC,IAAsB,iCAAlBC,KAAKC,MAAMC,MACvB,IAAIC,EAAU,IAEVA,EADkB,iCAAlBH,KAAKC,MAAMC,KACD,kCAGA,yBAA0BF,KAAKC,MAAMC,KAEnDF,KAAKC,MAAMG,QAAQC,KAAKF,K,+BAGlB,IAAD,OACDA,EAAU,KAUd,OARIA,EADkB,iCAAlBH,KAAKC,MAAMC,KACD,kCAGA,yBAA0BF,KAAKC,MAAMC,KAM3C,yBAAKI,UAAU,QACX,uBAAGC,QAAS,SAACC,GAAD,OAAW,EAAKC,QAAQD,KAApC,MACA,kBAAC,IAAD,CAAME,GAAIP,GAAV,IAAqBH,KAAKC,MAAMC,KAAhC,KADA,6BAE2BF,KAAKC,MAAMU,eACtC,yBAAKC,IAAKZ,KAAKC,MAAMY,IAAKC,IAAI,KAC9B,2BAAId,KAAKC,MAAMc,e,GA/BhBC,aAwCJC,cAAWpB,G,iBCbXqB,G,6KA/BX,IAAMC,EAAQnB,KAAKC,MAAMmB,WACzB,OACE,yBAAKd,UAAU,YACX,wCACA,2BAAOe,KAAM,OAAOC,SAAUtB,KAAKC,MAAMsB,gBAAiBC,WAAYxB,KAAKC,MAAMwB,aAGjF,6BACA,6BAEA,4BAAQnB,UAAU,cAAcC,QAASP,KAAKC,MAAMyB,OAAQC,SAAUR,GACrEA,GAAY,uBACPb,UAAU,wBACVsB,MAAO,CAAEC,YAAa,SAGzBV,GAAW,6CACVA,GAAW,0CAEc,IAA5BnB,KAAKC,MAAM6B,gBAAyB,uBAAGF,MAAO,CAACG,MAAM,QAAjB,oBACrC,6BACA,6BACA,4BAAQzB,UAAU,qBAAqBC,QAASP,KAAKC,MAAM+B,cAA3D,WAGA,2BAAIhC,KAAKC,MAAMc,e,GA5BFC,cCsCRiB,G,kNArCbC,eAAiB,SAACC,GACd,GAAc,UAAVA,EAAEC,IACJ,OAAQ,EAAKnC,MAAMoC,U,uDAIvB,IAAMlB,EAAQnB,KAAKC,MAAMmB,WAEzB,OACE,yBAAKd,UAAU,qBACX,wCACA,2BAAOe,KAAM,OAAOC,SAAUtB,KAAKC,MAAMsB,gBAAiBC,WAAYxB,KAAKC,MAAMqC,gBAGjF,6BACA,6BACA,4BAAQhC,UAAU,qBAAqBC,QAASP,KAAKC,MAAMoC,SAAWV,SAAUR,GAC/EA,GAAY,uBACPb,UAAU,wBACVsB,MAAO,CAAEC,YAAa,SAGzBV,GAAW,8CACVA,GAAW,4CAEmB,IAAjCnB,KAAKC,MAAMsC,qBAA8B,uBAAGX,MAAO,CAACG,MAAM,QAAjB,gCAC1C,6BACA,6BACA,4BAAQzB,UAAU,kBAAkBC,QAASP,KAAKC,MAAMuC,WAAxD,gBAGA,2BAAIxC,KAAKC,MAAMc,e,GAhCOC,cCMxByB,E,uKAEA,OACI,yBAAKnC,UAAU,WACX,iD,GAJQU,aCUT0B,GDAAzB,YAAWwB,G,uKCRlB,OACI,yBAAKnC,UAAU,UACX,gD,GAJKU,c,cCCrB,SAAS2B,EAAO1C,GAChB,OACI,4BAAQK,UAAU,SAASC,QAASN,EAAMM,SACzCN,EAAM2C,O,IAKLC,E,2KACWC,GAAI,IAAD,OACZ,OACE,kBAACH,EAAD,CACEC,MAAO5C,KAAKC,MAAM8C,QAAQD,GAC1BvC,QAAS,kBAAM,EAAKN,MAAMM,QAAQuC,Q,+BAMtC,OACE,6BACE,yBAAKxC,UAAU,aACZN,KAAKgD,aAAa,GAClBhD,KAAKgD,aAAa,GAClBhD,KAAKgD,aAAa,IAErB,yBAAK1C,UAAU,aACZN,KAAKgD,aAAa,GAClBhD,KAAKgD,aAAa,GAClBhD,KAAKgD,aAAa,IAErB,yBAAK1C,UAAU,aACZN,KAAKgD,aAAa,GAClBhD,KAAKgD,aAAa,GAClBhD,KAAKgD,aAAa,S,GA1BbhC,aAiCdiC,E,kDACF,WAAYhD,GAAQ,IAAD,8BACf,cAAMA,IACDiD,MAAQ,CACb9C,QAAS,CACL,CACA2C,QAASI,MAAM,GAAGC,KAAK,QAG3BC,WAAY,EACZC,SAAS,GATM,E,wDAaPR,GACR,IAAM1C,EAAUJ,KAAKkD,MAAM9C,QAAQmD,MAAM,EAAGvD,KAAKkD,MAAMG,WAAa,GAE9DN,EADU3C,EAAQA,EAAQoD,OAAS,GACjBT,QAAQQ,QAC5BE,EAAgBV,IAAYA,EAAQD,KAGxCC,EAAQD,GAAK9C,KAAKkD,MAAMI,QAAU,IAAM,IACxCtD,KAAK0D,SAAS,CACdtD,QAASA,EAAQuD,OAAO,CACpB,CACAZ,QAASA,KAGbM,WAAYjD,EAAQoD,OACpBF,SAAUtD,KAAKkD,MAAMI,a,6BAIlBM,GACH5D,KAAK0D,SAAS,CACdL,WAAYO,EACZN,QAAUM,EAAO,IAAO,M,+BAIlB,IAkBFC,EAlBC,OACCzD,EAAUJ,KAAKkD,MAAM9C,QACrB0D,EAAU1D,EAAQJ,KAAKkD,MAAMG,YAC7BU,EAASN,EAAgBK,EAAQf,SAEjCiB,EAAQ5D,EAAQ6D,KAAI,SAACL,EAAMM,GACjC,IAAMC,EAAOD,EACT,eAAiBA,EACjB,mBACJ,GAAW,IAAPA,EACA,OACI,yBAAK9B,IAAK8B,GACV,4BAAQ3D,QAAS,kBAAM,EAAK6D,OAAOF,KAAQC,OAanD,OALAN,EADIE,EACK,WAAaA,EAEb,iBAAmB/D,KAAKkD,MAAMI,QAAU,IAAM,KAIvD,yBAAKhD,UAAU,QACX,yBAAKA,UAAU,cACf,6BACA,6BACA,kBAAC,EAAD,CACIyC,QAASe,EAAQf,QACjBxC,QAAS,SAAAuC,GAAC,OAAI,EAAKuB,YAAYvB,OAGnC,yBAAKxC,UAAU,aAEf,6BACA,6BACA,6BAAMuD,GACN,6BACA,6BAAMG,S,GAjFMhD,aAwFTC,cAAWgC,GAG1B,SAASQ,EAAgBV,GAWzB,IAVA,IAAMuB,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEFxB,EAAI,EAAGA,EAAIwB,EAAMd,OAAQV,IAAK,CAAC,IAAD,cACjBwB,EAAMxB,GADW,GAC5ByB,EAD4B,KACzBC,EADyB,KACtBC,EADsB,KAEnC,GAAI1B,EAAQwB,IAAMxB,EAAQwB,KAAOxB,EAAQyB,IAAMzB,EAAQwB,KAAOxB,EAAQ0B,GACtE,OAAO1B,EAAQwB,GAGnB,OAAO,K,UCoBQG,E,kDArKX,WAAYzE,GAAO,IAAD,8BACd,cAAMA,IACDiD,MAAM,CACPyB,OAAO,EAAK1E,MAAM0E,OAClBC,SAAU,EAAK3E,MAAMC,KACrB2E,GAAG,EAAK5E,MAAM4E,GACdC,aAAa,EAAK7E,MAAM8E,QACxBC,WAAW,EAAK/E,MAAM+E,WACtBC,aAAc,EACdC,eAAe,GATL,E,gEAcd,IAAIpC,EACJ,IAAKA,EAAE,EAAEA,EAAE9C,KAAKkD,MAAM4B,aAAatB,OAAOV,IACE,IAApC9C,KAAKkD,MAAM4B,aAAahC,GAAGqC,QAC3BnF,KAAK0D,SAAS,CACVwB,eAAc,M,qCAOd,IAAD,OACTE,EAAQ,iDAAiDpF,KAAKkD,MAAM+B,aAAaI,WAC/EC,EAAU,CACZ,OAAUtF,KAAKkD,MAAM+B,cAHZ,4CAQb,4CAAAV,EAAA,6DAAwBgB,EAAxB,+BAA8B,GAAIC,EAAlC,+BAAyC,GAAzC,SACyBC,MAAMF,EAAK,CAChCG,OAAQ,SACRC,KAAM,OACNC,MAAO,WACPC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUR,KARzB,cACQS,EADR,yBAUSA,GAVT,4CARa,sBAKbnG,QAAQC,IAAI,gBACZD,QAAQC,IAAIuF,GANC,0CAqBbY,CAASd,EAASE,GAASa,MACzB,SAAAF,GAAcnG,QAAQC,IAAIkG,EAASpC,QACT,MAApBoC,EAASpC,QACb/D,QAAQC,IAAI,UACZ,EAAK2D,SAAS,CACZ0C,eAAe,KAIU,MAApBH,EAASpC,QAChB,EAAKH,SAAS,CAAC0C,eAAe,IAC9BC,OAAOC,MAAM,wBAGbxG,QAAQC,IAAI,uDACZsG,OAAOC,MAAM,wDAEf,IAAInG,EAAU,IAEVA,EADsB,iCAAtB,EAAK+C,MAAM0B,SACD,kCAGA,yBAA0B,EAAK1B,MAAM0B,SAInDyB,OAAOE,SAASC,QAAQrG,Q,kCAKhBK,GAAQ,IAAD,mDASf,4CAAA+D,EAAA,6DAAwBgB,EAAxB,+BAA8B,GAAIC,EAAlC,+BAAyC,GAAzC,SACyBC,MAAMF,EAAK,CAChCG,OAAQ,OACRC,KAAM,OACNC,MAAO,WACPC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUR,KARzB,cACQS,EADR,yBAUSA,GAVT,4CATe,kEAsBfC,CArBY,gDACI,CACZ,MAASlG,KAAKkD,MAAM2B,GACpB,WAAc7E,KAAKkD,MAAM+B,eAkBFkB,MACzB,SAAAF,GAAcnG,QAAQC,IAAIkG,EAASpC,QACT,MAApBoC,EAASpC,QACb/D,QAAQC,IAAI,UACZ,EAAK2D,SAAS,CACZ0C,eAAe,KAIU,MAApBH,EAASpC,QAChB,EAAKH,SAAS,CAAC0C,eAAe,IAC9BC,OAAOC,MAAM,4BAIbD,OAAOC,MAAM,uDAEf,IAAInG,EAAU,IAEVA,EADsB,iCAAtB,EAAK+C,MAAM0B,SACD,kCAGA,yBAA0B,EAAK1B,MAAM0B,SAInDyB,OAAOE,SAASC,QAAQrG,Q,+BAIpB,IACFsG,EADC,OAUL,OAPIA,EADoB,IAApBzG,KAAKkD,MAAMyB,OACN,kBAAC,EAAD,MAIC,kBAAC,EAAD,MAIN,yBAAKrE,UAAU,oBACsB,IAA3BN,KAAKkD,MAAMgC,eAAyB,yBAAK5E,UAAU,QACjD,oCACON,KAAKkD,MAAM2B,GADlB,gBAEW7E,KAAKkD,MAAM4B,aAAatB,OAFnC,IAE4CxD,KAAKkD,MAAM8B,WAFvD,KAGA,4BAAQzE,QAAS,SAACC,GAAD,OAAW,EAAKkG,YAAYlG,KAA7C,SACA,2BAAIR,KAAKC,MAAMc,YAEU,IAA3Bf,KAAKkD,MAAMgC,eAAwB,yBAAK5E,UAAU,QAChD,6BACA,4BAAQA,UAAU,iBAAiBC,QAAS,SAACC,GAAD,OAAW,EAAKmG,aAAanG,KAAzE,UACCiG,EAED,oCACOzG,KAAKkD,MAAM2B,GADlB,gBAEW7E,KAAKkD,MAAM4B,aAAatB,OAFnC,IAE4CxD,KAAKkD,MAAM8B,WAFvD,KAGA,2BAAIhF,KAAKC,MAAMc,gB,GA7JpBC,aCEb4F,E,kDACF,WAAY3G,GAAO,IAAD,8BACd,cAAMA,IACDiD,MAAM,CACP0B,SAAS,EAAK3E,MAAM4G,MAAM3G,KAC1ByE,OAAO,EAAK1E,MAAM4G,MAAMhC,GACxBiC,QAAQ,GACR5B,eAAc,EACd6B,mBAAkB,GAPR,E,gEAYG,IAAD,OAEhB/G,KAAK0D,SAAS,CACZqD,mBAAkB,IAGpB,IAAI5G,EAAU,6CAA8CH,KAAKkD,MAAMyB,OACvEqC,IAAMC,SAASpB,QAAQqB,OAAO,oBAAsB,iBACpDF,IAAMG,IAAIhH,GACPgG,MAAK,SAAAF,GACJ,EAAKvC,SAAS,CACZoD,QAAQb,EAAST,KAAKsB,QACtBC,mBAAkB,S,wCAmBVvG,GAAO,IAAD,OAEhB8E,EAAU,CACZ,KAAQtF,KAAKkD,MAAMyB,OACnB,WAAc,GAJI,4CAStB,4CAAAJ,EAAA,6DAAwBgB,EAAxB,+BAA8B,GAAIC,EAAlC,+BAAyC,GAAzC,SACyBC,MAAMF,EAAK,CAChCG,OAAQ,OACRC,KAAM,OACNC,MAAO,WACPC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUR,KARzB,cACQS,EADR,OAUEI,OAAOE,SAASa,QAAO,GAVzB,kBAWSnB,GAXT,4CATsB,sBAMtBnG,QAAQC,IAAI,WACZD,QAAQC,IAAIuF,GAPU,0CAuBtBY,CAtBY,iDAsBMZ,GAASa,MACzB,SAAAF,GAAcnG,QAAQC,IAAIkG,EAASpC,QACT,MAApBoC,EAASpC,QACb/D,QAAQC,IAAI,WACZ,EAAK2D,SAAS,CACZ0C,eAAe,KAIU,MAApBH,EAASpC,QAChB,EAAKH,SAAS,CAAC0C,eAAe,IAC9BC,OAAOC,MAAM,6BAGbxG,QAAQC,IAAI,uDACZsG,OAAOC,MAAM,6D,oCAOjBxG,QAAQC,IAAI,UACZC,KAAK0D,SAAS,CACZwB,eAAc,IAEhBpF,QAAQC,IAAIC,KAAKkD,MAAMgC,iB,+BAGf,IASFmC,EATC,OA6BL,OAnBIrH,KAAKkD,MAAM6D,oBACbM,EAAcrH,KAAKkD,MAAM4D,QAAQ7C,KAAI,SAACqD,EAAMC,GAIxC,OAAO,kBAAC,EAAD,CACL5C,OAAQ,EAAKzB,MAAMyB,OACnBE,GAAIyC,EAAKzC,GACTzC,IAAKmF,EACLrH,KAAM,EAAKgD,MAAM0B,SACjBI,WAAYsC,EAAKtC,WACjBD,QAASuC,EAAKvC,QACdyC,YAAa,EAAKA,kBAQtB,yBAAKlH,UAAU,iBACwB,IAAhCN,KAAKkD,MAAM6D,mBAA8B,+CAE5C,4BAAQzG,UAAU,qBAAqBC,QAAS,SAACC,GAAD,OAAW,EAAKiH,kBAAkBjH,KAAlF,eACA,6BACER,KAAKkD,MAAM6D,mBAAqBM,O,GAnIvBrG,aA6IZC,cAAW2F,GC+FXc,E,kDA1Ob,WAAYzH,GAAQ,IAAD,8BACjB,cAAMA,IACDiD,MAAM,CACT2D,MAAM,GACNc,MAAM,GACNC,aAAc,EACdC,iBAAkB,EAClBC,UAAW,EACXC,cAAc,EACdC,cAAe,EACfC,SAAW,KACXC,SAAW,KACX/G,SAAU,EACVW,gBAAiB,EACjBS,qBAAsB,GAdP,E,gEAoBE,IAAD,OAGlByE,IAAMC,SAASpB,QAAQqB,OAAO,oBAAsB,iBACpDF,IAAMG,IAFS,4CAGZhB,MAAK,SAAAF,GACJ,EAAKvC,SAAS,CACZmD,MAAMZ,EAAST,KACfqC,iBAAgB,OAKtBb,IAAMC,SAASpB,QAAQqB,OAAO,oBAAsB,iBACpDF,IAAMG,IAFG,+CAGNhB,MAAK,SAAAF,GACJ,EAAKvC,SAAS,CACZiE,MAAM1B,EAAST,KACfoC,aAAY,S,2CAOCpH,GACI,KAAnBA,EAAM2H,UACRnI,KAAKoI,0B,4CAIa5H,GAAQ,IAAD,mDAM3B,4CAAA+D,EAAA,6DAAwBgB,EAAxB,+BAA8B,GAAIC,EAAlC,+BAAyC,GAAzC,SACyBC,MAAMF,EAAK,CAChCG,OAAQ,OACRC,KAAM,OACNC,MAAO,WACPC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUR,KARzB,cACQS,EADR,yBAUSA,GAVT,4CAN2B,kEAmB3BC,CAlBS,8CACO,CAAC,SAAYlG,KAAKkD,MAAM+E,WAiBhB9B,MACtB,SAAAF,GAAcnG,QAAQC,IAAIkG,EAASpC,QACT,MAApBoC,EAASpC,QACb/D,QAAQC,IAAI,kBACZ,EAAK2D,SAAS,CACZkE,aAAY,EACZE,UAAU,EACVvF,qBAAsB,EACtBwF,cAAc,KAGW,MAApB9B,EAASpC,QAChB,EAAKH,SAAS,CAACnB,qBAAqB,IACpCzC,QAAQC,IAAI,mBAGZD,QAAQC,IAAI,4D,wCAKAS,GACO,KAAnBA,EAAM2H,UACRnI,KAAKqI,uB,yCAIU7H,GAAQ,IAAD,OACxBR,KAAK0D,SAAS,CAAEvC,SAAS,IAEzB,IAAM8G,EAAWjI,KAAKkD,MAAM+E,SAG5BjI,KAAKkD,MAAMyE,MAAM1D,KAAI,SAAAqE,GACfL,IAAWK,EAAKL,WAClB,EAAKvE,SAAS,CAAEvC,SAAS,IACzB,EAAKuC,SAAS,CAACoE,UAAU,IACzB,EAAKpE,SAAS,CAAC5B,gBAAiB,SAGV,IAAtB9B,KAAKkD,MAAM4E,WACb9H,KAAK0D,SAAS,CAAEvC,SAAS,IACzBnB,KAAK0D,SAAS,CAAC5B,gBAAiB,O,4CAIdtB,GACpB,IAAM+H,EAAO,eACRvI,KAAKkD,OAEVqF,EAAQN,SAAWzH,EAAMgI,OAAO5F,MAChC5C,KAAK0D,SAAS,CAACuE,SAAUM,EAAQN,a,4CAGbzH,GACpB,IAAM+H,EAAO,eACRvI,KAAKkD,OAEVqF,EAAQL,SAAW1H,EAAMgI,OAAO5F,MAChC5C,KAAK0D,SAAS,CAACwE,SAAUK,EAAQL,a,uCAGlB1H,GACf,IAAM+H,EAAO,eACRvI,KAAKkD,OAEVqF,EAAQP,cAAe,EACvBhI,KAAK0D,SAAS,CAACsE,aAAcO,EAAQP,iB,0CAGnBxH,GAClB,IAAM+H,EAAO,eACRvI,KAAKkD,OAEVqF,EAAQP,cAAe,EACvBhI,KAAK0D,SAAS,CAACsE,aAAcO,EAAQP,iB,+BAI5B,IAAD,OAEFpG,EAAQ,CACZG,MAAO,WAGH8E,EAAQ7G,KAAKkD,MAAM2D,MAAM5C,KAAI,SAACwC,EAAMc,GAEtC,OAAO,kBAAC,EAAD,CACLrH,KAAMuG,EAAKvG,KACXkC,IAAKqE,EAAK5B,GACVlE,cAAe8F,EAAK9F,cACpBE,IAAK4F,EAAKgC,YAKhB,SAASC,EAAYC,GACnB,OAAO,kBAAC,EAAD,CAAc9B,MAAO8B,IAGR3I,KAAKkD,MAAM2D,MAAM5C,KAAI,SAACwC,EAAMc,GAC9C,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOqB,KAAM,wBAAwBnC,EAAKvG,KAAM2I,OAAK,EAACC,UAAWrC,EAAKvG,WAO9E,OAAiC,IAA7BF,KAAKkD,MAAM2E,kBAAoD,IAAzB7H,KAAKkD,MAAM0E,YAC5C,4CAEyB,IAA1B5H,KAAKkD,MAAM8E,eAAkD,IAA1BhI,KAAKkD,MAAM6E,eAA8C,IAAtB/H,KAAKkD,MAAM4E,SAErF,yBAAKxH,UAAU,OACb,wBAAIsB,MAAOA,GAAX,8BACA,kBAAC,EAAD,CACAL,gBAAiB,SAACf,GAAD,OAAU,EAAKuI,sBAAsBvI,IAEtDkB,OAAQ,SAAClB,GAAD,OAAU,EAAK6H,mBAAmB7H,IAC1CiB,WAAY,SAACjB,GAAD,OAAW,EAAKwI,kBAAkBxI,IAC9CY,WAAYpB,KAAKkD,MAAM/B,QACvBa,aAAc,SAACxB,GAAD,OAAW,EAAKyI,oBAAoBzI,IAClDsB,eAAgB9B,KAAKkD,MAAMpB,mBAIE,IAA1B9B,KAAKkD,MAAM8E,eAA6C,IAAtBhI,KAAKkD,MAAM4E,WAA8C,IAA1B9H,KAAKkD,MAAM6E,aAEjF,yBAAKzH,UAAU,OACb,wBAAIsB,MAAOA,GAAX,8BACA,kBAAC,EAAD,CACAL,gBAAiB,SAACf,GAAD,OAAU,EAAKuI,sBAAsBvI,IAEtD6B,SAAU,SAAC7B,GAAD,OAAU,EAAK4H,sBAAsB5H,IAC/C8B,cAAe,SAAC9B,GAAD,OAAW,EAAK0I,qBAAqB1I,IACpDY,WAAYpB,KAAKkD,MAAM/B,QACvBqB,UAAW,SAAChC,GAAD,OAAW,EAAK2I,iBAAiB3I,IAC5C+B,oBAAqBvC,KAAKkD,MAAMX,uBAOhC,yBAAKjC,UAAU,OACb,wBAAIsB,MAAOA,GAAX,MAAuB5B,KAAKkD,MAAM+E,SAAlC,4BACA,kBAAC,IAAD,CAAMvH,GAAI,+BAAV,iBACA,6BACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOkI,KAAM,+BAAgC/B,GAC7C,kBAAC,IAAD,CAAO+B,KAAM,iCAAkCF,EAAY1I,KAAKkD,MAAM2D,MAAM,KAC5E,kBAAC,IAAD,CAAO+B,KAAM,gCAAiCF,EAAY1I,KAAKkD,MAAM2D,MAAM,KAC3E,kBAAC,IAAD,CAAO+B,KAAM,mCAAoCF,EAAY1I,KAAKkD,MAAM2D,MAAM,W,GAjO1E7F,aCJEoI,QACW,cAA7B/C,OAAOE,SAAS8C,UAEe,UAA7BhD,OAAOE,SAAS8C,UAEhBhD,OAAOE,SAAS8C,SAASC,MACvB,2DCXN,IAAMC,EACF,kBAAC,IAAD,KACI,kBAAC,EAAD,OAIRC,IAASC,OAAOF,EAAKG,SAASC,eAAe,SDsHvC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3D,MAAK,SAAA4D,GACjCA,EAAaC,kB","file":"static/js/main.0b22024e.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './Game.css';\r\nimport {\r\n//    BrowserRouter as Router,\r\n    withRouter,\r\n//    Switch,\r\n//    Route,\r\n    Link\r\n  } from \"react-router-dom\";\r\n\r\nclass Game extends Component {\r\n    clicked() {\r\n        //let game_url=\"/\"+game_name\r\n        console.log(this.props.name===\"Kółko i krzyżyk\")\r\n        var gameURL = \"/\"\r\n        if (this.props.name===\"Kółko i krzyżyk\"){\r\n            gameURL = \"/board-games-frontend/tictactoe\"\r\n        }\r\n        else{\r\n            gameURL = \"/board-games-frontend/\"+ this.props.name\r\n        }\r\n        this.props.history.push(gameURL)\r\n    }\r\n\r\n    render() {\r\n        var gameURL = \"/ \"\r\n        if (this.props.name===\"Kółko i krzyżyk\"){\r\n            gameURL = \"/board-games-frontend/tictactoe\"\r\n        }\r\n        else{\r\n            gameURL = \"/board-games-frontend/\"+ this.props.name\r\n\r\n        }\r\n\r\n        //console.log(props)\r\n        return (\r\n                <div className=\"Game\">\r\n                    <p onClick={(event) => this.clicked(event)}>I'm\r\n                    <Link to={gameURL}> {this.props.name} </Link>\r\n                    and number of players is: {this.props.playersNumber}</p>\r\n                    <img src={this.props.img} alt=\"\"></img>\r\n                    <p>{this.props.children}</p>\r\n                </div>\r\n        \r\n        )\r\n\r\n    }\r\n\r\n};\r\n\r\nexport default withRouter(Game);","import React, {Component} from 'react';\r\nimport './LogPanel.css'\r\n\r\nclass LogPanel extends Component {\r\n\r\n  render (){\r\n    const loading=this.props.submitting  \r\n    return (\r\n      <div className=\"LogPanel\">\r\n          <p>Username:</p>\r\n          <input type= \"text\" onChange={this.props.changedUsername} onKeyPress={this.props.enterLogin} />\r\n          {/*<p>Password:</p>\r\n          <input type= \"password\" onChange={props.changedPassword} />*/}\r\n          <br></br>\r\n          <br></br>\r\n          \r\n          <button className=\"loginButton\" onClick={this.props.submit} disabled={loading}>\r\n          {loading && (<i\r\n                className=\"fa fa-refresh fa-spin\"\r\n                style={{ marginRight: \"5px\" }}\r\n              />\r\n            )}\r\n            {loading && <span>Logging in</span>}\r\n            {!loading && <span>Log in</span>}\r\n          </button>\r\n          {this.props.wrongLoginData===true && <p style={{color:'red'}}>Wrong login data</p>}\r\n          <br></br>\r\n          <br></br>\r\n          <button className=\"gotoRegisterButton\" onClick={this.props.gotoRegister} >\r\n          Sign in\r\n          </button>\r\n          <p>{this.props.children}</p>\r\n      </div>\r\n      );\r\n  }\r\n};\r\n\r\nexport default LogPanel;","import React, {Component} from 'react';\r\nimport './RegistrationPanel.css'\r\n\r\nclass RegistrationPanel extends Component {\r\n  _handleKeyDown = (e) => {\r\n      if (e.key === 'Enter') {\r\n        return (this.props.register) \r\n      } \r\n  }\r\n  render(){\r\n    const loading=this.props.submitting\r\n\r\n    return (\r\n      <div className=\"RegistrationPanel\">\r\n          <p>Username:</p>\r\n          <input type= \"text\" onChange={this.props.changedUsername} onKeyPress={this.props.enterRegister} />\r\n          {/*<p>Password:</p>\r\n          <input type= \"password\" onChange={this.props.changedPassword} />*/}\r\n          <br></br>\r\n          <br></br>\r\n          <button className=\"registrationButton\" onClick={this.props.register}  disabled={loading}>\r\n          {loading && (<i\r\n                className=\"fa fa-refresh fa-spin\"\r\n                style={{ marginRight: \"5px\" }}\r\n              />\r\n            )}\r\n            {loading && <span>Registering</span>}\r\n            {!loading && <span>Register</span>}\r\n          </button>\r\n          {this.props.unavaliableUsername===true && <p style={{color:'red'}}>That username is unavaliable</p>}\r\n          <br></br>\r\n          <br></br>\r\n          <button className=\"gotoLoginButton\" onClick={this.props.gotoLogin} >\r\n          Login screen\r\n          </button>\r\n          <p>{this.props.children}</p>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default RegistrationPanel;","import React, {Component} from 'react';\r\nimport {\r\n    BrowserRouter as Router,\r\n    withRouter,\r\n//    Switch,\r\n//    Route,\r\n//    Link\r\n  } from \"react-router-dom\";\r\n\r\n  class Warcaby extends Component {\r\n    render () {\r\n        return (\r\n            <div className=\"Warcaby\">\r\n                <p>Warcaby bejbo</p>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default withRouter(Warcaby);","import React, {Component} from 'react';\r\nimport {\r\n    BrowserRouter as Router,\r\n    withRouter,\r\n//    Switch,\r\n//    Route,\r\n//    Link\r\n  } from \"react-router-dom\";\r\n\r\nclass Szachy extends Component {\r\n    render () {\r\n        return (\r\n            <div className=\"Szachy\">\r\n                <p>Szachy bejbo</p>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Szachy;","import React, {Component} from 'react';\r\nimport {\r\n//    BrowserRouter as Router,\r\n    withRouter,\r\n//    Switch,\r\n//    Route,\r\n//    Link\r\n  } from \"react-router-dom\";\r\n  import \"./tictactoe.css\"\r\n\r\nfunction Square(props) {\r\nreturn (\r\n    <button className=\"square\" onClick={props.onClick}>\r\n    {props.value}\r\n    </button>\r\n);\r\n}\r\n\r\nclass Board extends Component {\r\n    renderSquare(i) {\r\n        return (\r\n          <Square\r\n            value={this.props.squares[i]}\r\n            onClick={() => this.props.onClick(i)}\r\n          />\r\n        );\r\n      }\r\n\r\n      render() {\r\n        return (\r\n          <div>\r\n            <div className=\"board-row\">\r\n              {this.renderSquare(0)}\r\n              {this.renderSquare(1)}\r\n              {this.renderSquare(2)}\r\n            </div>\r\n            <div className=\"board-row\">\r\n              {this.renderSquare(3)}\r\n              {this.renderSquare(4)}\r\n              {this.renderSquare(5)}\r\n            </div>\r\n            <div className=\"board-row\">\r\n              {this.renderSquare(6)}\r\n              {this.renderSquare(7)}\r\n              {this.renderSquare(8)}\r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n};\r\n\r\nclass Tictactoe extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        history: [\r\n            {\r\n            squares: Array(9).fill(null)\r\n            }\r\n        ],\r\n        stepNumber: 0,\r\n        xIsNext: true\r\n        };\r\n    }\r\n\r\n    handleClick(i) {\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n        if (calculateWinner(squares) || squares[i]) {\r\n        return;\r\n        }\r\n        squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n        this.setState({\r\n        history: history.concat([\r\n            {\r\n            squares: squares\r\n            }\r\n        ]),\r\n        stepNumber: history.length,\r\n        xIsNext: !this.state.xIsNext\r\n        });\r\n    }\r\n\r\n    jumpTo(step) {\r\n        this.setState({\r\n        stepNumber: step,\r\n        xIsNext: (step % 2) === 0\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const winner = calculateWinner(current.squares);\r\n\r\n        const moves = history.map((step, move) => {\r\n        const desc = move ?\r\n            'Go to move #' + move :\r\n            'Go to game start';\r\n        if (move===0){\r\n            return (\r\n                <div key={move}>\r\n                <button onClick={() => this.jumpTo(move)}>{desc}</button>\r\n                </div>\r\n            );\r\n        }\r\n        });\r\n\r\n        let status;\r\n        if (winner) {\r\n        status = \"Winner: \" + winner;\r\n        } else {\r\n        status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\r\n        }\r\n\r\n        return (\r\n        <div className=\"game\">\r\n            <div className=\"game-board\">\r\n            <br></br>\r\n            <br></br>\r\n            <Board\r\n                squares={current.squares}\r\n                onClick={i => this.handleClick(i)}\r\n            />\r\n            </div>\r\n            <div className=\"game-info\">\r\n\r\n            <br></br>\r\n            <br></br>\r\n            <div>{status}</div>\r\n            <br></br>\r\n            <div>{moves}</div>\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(Tictactoe);\r\n\r\n  \r\nfunction calculateWinner(squares) {\r\nconst lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n];\r\nfor (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n    return squares[a];\r\n    }\r\n}\r\nreturn null;\r\n}\r\n  ","import React, {Component} from 'react';\r\nimport './Room.css';\r\nimport Warcaby from '../../Games/warcaby/warcaby'\r\nimport Szachy from '../../Games/szachy/szachy'\r\nimport Tictactoe from '../../Games/tictactoe/tictactoe'\r\nimport {\r\n    BrowserRouter as Router,\r\n    withRouter,\r\n//    Switch,\r\n//    Route,\r\n//    Link\r\n  } from \"react-router-dom\";\r\n\r\nclass Room extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            gameId:this.props.gameId,\r\n            gameName: this.props.name,\r\n            id:this.props.id,\r\n            playersArray:this.props.players,\r\n            maxPlayers:this.props.maxPlayers,\r\n            playerNameId: 9,\r\n            isMatchJoined: false\r\n\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        var i;\r\n        for (i=0;i<this.state.playersArray.length;i++){\r\n            if (this.state.playersArray[i].userId===9) {\r\n                this.setState({\r\n                    isMatchJoined:true,\r\n                });\r\n                //this.props.matchPasser();\r\n            }\r\n        }\r\n    }\r\n\r\n    clickedLeave() {\r\n      let roomURL='https://boardgames1.herokuapp.com/leave-match/'+this.state.playerNameId.toString()\r\n      const article = {\r\n          \"userId\": this.state.playerNameId};\r\n      \r\n      console.log('Leave match:')\r\n      console.log(article)\r\n  \r\n      async function postData(url = '', data = {}) {\r\n        const response = await fetch(url, {\r\n          method: 'DELETE', // *GET, POST, PUT, DELETE, etc.\r\n          mode: 'cors', // no-cors, *cors, same-origin\r\n          cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            },\r\n          body: JSON.stringify(data) // body data type must match \"Content-Type\" header\r\n        });\r\n        return response; // parses JSON response into native JavaScript objects\r\n      }\r\n      \r\n      postData(roomURL, article).then(\r\n        response => { console.log(response.status);\r\n          if( response.status === 204){\r\n          console.log(\"Joined\");\r\n          this.setState({\r\n            isJoinedMatch: false,\r\n          });\r\n          //this.props.matchPasser();\r\n        }\r\n        else if (response.status === 500){\r\n          this.setState({isJoinedMatch: false});\r\n          window.alert(\"You are in no room\");\r\n        }\r\n        else{\r\n          console.log(\"Problem z łącznością z serwerem\");\r\n          window.alert(\"Problem z łącznością z serwerem\")\r\n        }\r\n        var gameURL = \"/\"\r\n        if (this.state.gameName===\"Kółko i krzyżyk\"){\r\n            gameURL = \"/board-games-frontend/tictactoe\"\r\n        }\r\n        else{\r\n            gameURL = \"/board-games-frontend/\"+ this.state.gameName\r\n\r\n        }\r\n        //console.log(\"game name:\", this.state.gameName)\r\n        window.location.replace(gameURL);\r\n      \r\n      });\r\n    }\r\n\r\n    clickedJoin(event) {\r\n        let roomURL='https://boardgames1.herokuapp.com/join-match/'\r\n        const article = {\r\n            \"match\": this.state.id,\r\n            \"playerName\": this.state.playerNameId};\r\n        \r\n        //console.log('Article')\r\n        //console.log(article)\r\n    \r\n        async function postData(url = '', data = {}) {\r\n          const response = await fetch(url, {\r\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\r\n            mode: 'cors', // no-cors, *cors, same-origin\r\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              },\r\n            body: JSON.stringify(data) // body data type must match \"Content-Type\" header\r\n          });\r\n          return response; // parses JSON response into native JavaScript objects\r\n        }\r\n        \r\n        postData(roomURL, article).then(\r\n          response => { console.log(response.status);\r\n            if( response.status === 201){\r\n            console.log(\"Joined\");\r\n            this.setState({\r\n              isJoinedMatch: true,\r\n            });\r\n            //this.props.matchPasser();\r\n          }\r\n          else if (response.status === 500){\r\n            this.setState({isJoinedMatch: false});\r\n            window.alert(\"You are already in room\");\r\n          }\r\n          else{\r\n            //console.log(\"Problem z łącznością z serwerem\");\r\n            window.alert(\"Problem z łącznością z serwerem\")\r\n          }\r\n          var gameURL = \"/\"\r\n          if (this.state.gameName===\"Kółko i krzyżyk\"){\r\n              gameURL = \"/board-games-frontend/tictactoe\"\r\n          }\r\n          else{\r\n              gameURL = \"/board-games-frontend/\"+ this.state.gameName\r\n\r\n          }\r\n          //console.log(\"game name:\", this.state.gameName)\r\n          window.location.replace(gameURL);\r\n          });\r\n      }\r\n\r\n    render() {\r\n        let game\r\n        if (this.state.gameId===1){\r\n            game=<Tictactoe/>\r\n        }\r\n        else{\r\n \r\n            game= <Szachy/>\r\n            \r\n        }\r\n        return (\r\n            <div className=\"text-and-button\">\r\n                    { this.state.isMatchJoined===false && <div className=\"Room\">\r\n                        <p>\r\n                        Room #{this.state.id} | \r\n                        players: [{this.state.playersArray.length}/{this.state.maxPlayers}]</p>\r\n                        <button onClick={(event) => this.clickedJoin(event)} > join</button>\r\n                        <p>{this.props.children}</p>\r\n                    </div>}\r\n                    { this.state.isMatchJoined===true && <div className=\"Room\">\r\n                        <br></br>\r\n                        <button className=\"button button1\" onClick={(event) => this.clickedLeave(event)} > Leave</button>\r\n                        {game\r\n                        }\r\n                        <p>\r\n                        Room #{this.state.id} | \r\n                        players: [{this.state.playersArray.length}/{this.state.maxPlayers}]</p>\r\n                        <p>{this.props.children}</p>\r\n                    </div>}\r\n                </div>\r\n        \r\n        )\r\n\r\n    }\r\n};\r\n\r\nexport default Room;","import React, {Component} from 'react';\r\nimport axios from 'axios';\r\nimport Room from './Room/Room';\r\nimport Warcaby from '../Games/warcaby/warcaby'\r\nimport Szachy from '../Games/szachy/szachy'\r\nimport Tictactoe from '../Games/tictactoe/tictactoe'\r\n///import './GameMatching.css';\r\nimport {\r\n//    BrowserRouter as Route\r\n    withRouter,\r\n//    Switch,\r\n//    Route,\r\n    Link\r\n  } from \"react-router-dom\";\r\n\r\nclass GameMatching extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            gameName:this.props.games.name, \r\n            gameId:this.props.games.id,\r\n            matches:[],\r\n            isMatchJoined:false,\r\n            matchesListLoaded:false,\r\n\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        this.setState({\r\n          matchesListLoaded:false\r\n        })\r\n        //let gameURL = \"/\"+ this.props.name='https://cors-anywhere.herokuapp.com/http://boardgames1.herokuapp.com/games/?fbclid=IwAR37IdjpLC4RmLuN1wSehM1DtarmIavEGkcy7SMh-kf_lsIEVp0r3DeyaXY'\r\n        let gameURL = \"https://boardgames1.herokuapp.com/matches/\"+ this.state.gameId\r\n        axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest'\r\n        axios.get(gameURL)\r\n          .then(response => {\r\n            this.setState({\r\n              matches:response.data.matches,\r\n              matchesListLoaded:true\r\n            });\r\n          });\r\n      }\r\n\r\n      /*componentDidUpdate(){\r\n        //let gameURL = \"/\"+ this.props.name='https://cors-anywhere.herokuapp.com/http://boardgames1.herokuapp.com/games/?fbclid=IwAR37IdjpLC4RmLuN1wSehM1DtarmIavEGkcy7SMh-kf_lsIEVp0r3DeyaXY'\r\n        let gameURL = \"https://boardgames1.herokuapp.com/matches/\"+ this.state.gameId\r\n        axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest'\r\n        axios.get(gameURL)\r\n          .then(response => {\r\n            this.setState({\r\n              matches:response.data.matches,\r\n              matchesListLoaded:true\r\n            });\r\n          });\r\n      }*/\r\n      \r\n    \r\n    clickedCreateRoom(event){\r\n      let roomURL='https://boardgames1.herokuapp.com/creatematch/'\r\n      const article = {\r\n          \"game\": this.state.gameId,\r\n          \"maxPlayers\": 2};\r\n      \r\n      console.log('Article')\r\n      console.log(article)\r\n  \r\n      async function postData(url = '', data = {}) {\r\n        const response = await fetch(url, {\r\n          method: 'POST', // *GET, POST, PUT, DELETE, etc.\r\n          mode: 'cors', // no-cors, *cors, same-origin\r\n          cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            },\r\n          body: JSON.stringify(data) // body data type must match \"Content-Type\" header\r\n        });\r\n        window.location.reload(false);\r\n        return response; // parses JSON response into native JavaScript objects\r\n      }\r\n      \r\n      postData(roomURL, article).then(\r\n        response => { console.log(response.status);\r\n          if( response.status === 201){\r\n          console.log(\"Created\");\r\n          this.setState({\r\n            isJoinedMatch: true,\r\n          });\r\n          //this.props.matchPasser();\r\n        }\r\n        else if (response.status === 500){\r\n          this.setState({isJoinedMatch: false});\r\n          window.alert(\"You are already in room\");\r\n        }\r\n        else{\r\n          console.log(\"Problem z łącznością z serwerem\");\r\n          window.alert(\"Problem z łącznością z serwerem\")\r\n        }\r\n      \r\n      });\r\n    }\r\n\r\n    matchPasser() {\r\n      console.log(\"Passed\");\r\n      this.setState({\r\n        isMatchJoined:true,\r\n      });\r\n      console.log(this.state.isMatchJoined);\r\n    }\r\n\r\n    render() {\r\n\r\n        //gotowy skopiowany kod z App.js do wylistowania matchy i dołączenia do nich\r\n        //dokończyć design komponent Room w CSSie\r\n        //dodać zmianę stanu pokoi na kliknięcie\r\n        //dołączenie i dopiero potem renderowanie gry\r\n        //zrobić to zmienną joinedMatch w stanie klasy w tym pliku\r\n        \r\n        \r\n        let matchesList\r\n        if (this.state.matchesListLoaded) {\r\n          matchesList = this.state.matches.map((room, index) => { \r\n              //console.log(room.players.length)\r\n              //console.log('wy[isuję array players')\r\n              //console.log(\"props name:\",this.state.gameName)\r\n              return <Room\r\n                gameId={this.state.gameId} \r\n                id={room.id}\r\n                key={index}\r\n                name={this.state.gameName}\r\n                maxPlayers={room.maxPlayers}\r\n                players={room.players}\r\n                matchPasser={this.matchPasser}\r\n                />;\r\n            });\r\n            //console.log('odłożone')\r\n        }\r\n\r\n\r\n        return(\r\n            <div className=\"GameMatching\">\r\n                { (this.state.matchesListLoaded)===false && <h2>Loading room...</h2>\r\n                }\r\n                <button className=\"button Create-Room\" onClick={(event) => this.clickedCreateRoom(event)} >Create room</button>\r\n                <br></br>\r\n                { this.state.matchesListLoaded && matchesList}\r\n                {//console.log(this.state.matches)\r\n                }\r\n            </div>\r\n        )\r\n\r\n    }\r\n\r\n};\r\n\r\nexport default withRouter(GameMatching);","import React, { Component } from 'react';\r\nimport Game from './Game/Game';\r\nimport axios from 'axios';\r\nimport LogPanel from './LogPanel/LogPanel';\r\nimport RegistrationPanel from './RegistrationPanel/RegistrationPanel'\r\nimport Warcaby from './Games/warcaby/warcaby'\r\nimport Szachy from './Games/szachy/szachy'\r\nimport Tictactoe from './Games/tictactoe/tictactoe'\r\nimport GameMatching from './GamesMatching/GameMatching'\r\nimport {\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\n\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state={\r\n      games:[],\r\n      users:[],\r\n      usersLoaded : false,\r\n      gamesListLoaded : false,\r\n      isLogged : true, //NIEEE\r\n      isRegistered: false,\r\n      wantRegister : false,\r\n      username : null,\r\n      password : null,\r\n      loading : false,\r\n      wrongLoginData : false,\r\n      unavaliableUsername : false\r\n\r\n    }\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    //let uTest='https://rickandmortyapi.com/api/character/187'\r\n    let uGamesList='https://boardgames1.herokuapp.com/games/'\r\n    axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest'\r\n    axios.get(uGamesList)\r\n      .then(response => {\r\n        this.setState({\r\n          games:response.data,\r\n          gamesListLoaded:true\r\n        });\r\n      });\r\n\r\n    let uLog='https://boardgames1.herokuapp.com/register/'\r\n    axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest'\r\n    axios.get(uLog)\r\n      .then(response => {\r\n        this.setState({\r\n          users:response.data,\r\n          usersLoaded:true\r\n        });\r\n      });\r\n   \r\n\r\n  }\r\n\r\n  enterRegisterHandler(event) {\r\n    if (event.charCode === 13){\r\n      this.submitRegisterHandler();\r\n    }\r\n  }\r\n  \r\n  submitRegisterHandler(event) {\r\n    let uReg='https://boardgames1.herokuapp.com/register/'\r\n    const article = {\"username\": this.state.username};\r\n    \r\n    //console.log(article)\r\n\r\n    async function postData(url = '', data = {}) {\r\n      const response = await fetch(url, {\r\n        method: 'POST', // *GET, POST, PUT, DELETE, etc.\r\n        mode: 'cors', // no-cors, *cors, same-origin\r\n        cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          },\r\n        body: JSON.stringify(data) // body data type must match \"Content-Type\" header\r\n      });\r\n      return response; // parses JSON response into native JavaScript objects\r\n    }\r\n    \r\n    postData(uReg, article).then(\r\n      response => { console.log(response.status);\r\n        if( response.status === 201){\r\n        console.log(\"Zarejestrowany\");\r\n        this.setState({\r\n          usersLoaded:true,\r\n          isLogged: true,\r\n          unavaliableUsername : false,\r\n          isRegistered: true\r\n        });\r\n      }\r\n      else if (response.status === 400){\r\n        this.setState({unavaliableUsername: true});\r\n        console.log(\"Zła nazwa\");\r\n      }\r\n      else{\r\n        console.log(\"Problem z łącznością z serwerem\");\r\n      }\r\n    });\r\n  }\r\n\r\n  enterLoginHandler(event) {\r\n    if (event.charCode === 13){\r\n      this.submitLoginHandler();\r\n    }\r\n  }\r\n\r\n  submitLoginHandler(event) {\r\n    this.setState({ loading: true });\r\n    \r\n    const username = this.state.username;\r\n    //const users = this.state.users\r\n\r\n    this.state.users.map(user => { \r\n      if (username===user.username){\r\n        this.setState({ loading: false });\r\n        this.setState({isLogged: true});\r\n        this.setState({wrongLoginData : false})\r\n      };\r\n    });\r\n    if (this.state.isLogged===false){\r\n      this.setState({ loading: false });\r\n      this.setState({wrongLoginData : true});\r\n    }\r\n  }\r\n\r\n  usernameChangeHandler(event) {\r\n    const logData = {\r\n      ...this.state\r\n    };\r\n    logData.username = event.target.value;\r\n    this.setState({username: logData.username})\r\n  }\r\n\r\n  passwordChangeHandler(event) {\r\n    const logData = {\r\n      ...this.state\r\n    };\r\n    logData.password = event.target.value;\r\n    this.setState({password: logData.password})\r\n  }\r\n\r\n  gotoLoginHandler(event) {\r\n    const logData = {\r\n      ...this.state\r\n    };\r\n    logData.wantRegister = false;\r\n    this.setState({wantRegister: logData.wantRegister})\r\n  }\r\n\r\n  gotoRegisterHandler(event) {\r\n    const logData = {\r\n      ...this.state\r\n    };\r\n    logData.wantRegister = true;\r\n    this.setState({wantRegister: logData.wantRegister})\r\n  }\r\n  \r\n\r\n  render () {\r\n\r\n    const style = {\r\n      color: '#0D0A0B',\r\n    };\r\n\r\n    const games = this.state.games.map((game, index) => { \r\n      //if (game.name !== \"Kółko i krzyżyk\") {\r\n        return <Game \r\n          name={game.name}\r\n          key={game.id}\r\n          playersNumber={game.playersNumber}\r\n          img={game.imgUrl}\r\n          />;\r\n      //}\r\n    });\r\n\r\n    function GameMatcher(gamesParams) {\r\n      return <GameMatching games={gamesParams}/>\r\n    }\r\n\r\n    const switchToGames = this.state.games.map((game, index) => { \r\n        return(\r\n          <Switch>\r\n            <Route path={'board-games-frontend/'+game.name} exact component={game.name}/>\r\n          </Switch>\r\n        )\r\n    });\r\n\r\n    //var {gamesListLoaded, gs} = this.setState;\r\n\r\n    if (this.state.gamesListLoaded===false || this.state.usersLoaded===false ) {\r\n      return <div>Loading...</div>;\r\n    }\r\n    else if(this.state.wantRegister===false && this.state.isRegistered===false && this.state.isLogged===false){\r\n      return(\r\n        <div className=\"App\">\r\n          <h1 style={style} >Hi, welcome to BoardGames!</h1>\r\n          <LogPanel\r\n          changedUsername={(event)=> this.usernameChangeHandler(event)}\r\n          //changedPassword={(event)=> this.passwordChangeHandler(event)}\r\n          submit={(event) =>this.submitLoginHandler(event)}\r\n          enterLogin={(event) => this.enterLoginHandler(event)}\r\n          submitting={this.state.loading}\r\n          gotoRegister={(event) => this.gotoRegisterHandler(event)}\r\n          wrongLoginData={this.state.wrongLoginData}></LogPanel>\r\n        </div>\r\n      );\r\n    }\r\n    else if (this.state.wantRegister===true && this.state.isLogged===false && this.state.isRegistered===false ) {\r\n      return(\r\n        <div className=\"App\">\r\n          <h1 style={style} >Hi, welcome to BoardGames!</h1>\r\n          <RegistrationPanel\r\n          changedUsername={(event)=> this.usernameChangeHandler(event)}\r\n          //changedPassword={(event)=> this.passwordChangeHandler(event)}\r\n          register={(event) =>this.submitRegisterHandler(event)}\r\n          enterRegister={(event) => this.enterRegisterHandler(event)}\r\n          submitting={this.state.loading}\r\n          gotoLogin={(event) => this.gotoLoginHandler(event)}\r\n          unavaliableUsername={this.state.unavaliableUsername}></RegistrationPanel>\r\n        </div>\r\n      );\r\n    }\r\n    else{\r\n      ///const isMatched = \r\n      return (\r\n          <div className=\"App\">\r\n            <h1 style={style} >Hi {this.state.username}, welcome to BoardGames!</h1>\r\n            <Link to={'/board-games-frontend/games'}> Go to games </Link>\r\n            <h2></h2>\r\n            <Switch>\r\n              <Route path={\"/board-games-frontend/games\"}>{games}</Route>\r\n              <Route path={\"/board-games-frontend/Warcaby\"}>{GameMatcher(this.state.games[0])}</Route>\r\n              <Route path={\"/board-games-frontend/Szachy\"}>{GameMatcher(this.state.games[1])}</Route>\r\n              <Route path={\"/board-games-frontend/tictactoe\"}>{GameMatcher(this.state.games[0])}</Route>\r\n            </Switch>\r\n          </div>\r\n    );\r\n    }  \r\n  }\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom'\n\nconst app = (\n    <BrowserRouter>\n        <App/>\n    </BrowserRouter>\n);\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}