{"version":3,"sources":["Game/Game.js","LogPanel/LogPanel.js","RegistrationPanel/RegistrationPanel.js","App.js","serviceWorker.js","index.js"],"names":["Game","props","className","onClick","click","name","playersNumber","src","img","alt","children","LogPanel","loading","submitting","type","onChange","changedUsername","submit","disabled","style","marginRight","wrongLoginData","color","RegistrationPanel","register","unavaliableUsername","App","state","games","users","usersLoaded","gamesListLoaded","isLogged","isRegistered","wantRegister","username","password","axios","defaults","headers","common","get","then","response","setState","data","this","event","map","user","logData","target","value","game","imgUrl","usernameChangeHandler","submitHandler","submitRegisterHandler","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.33601903.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Game.css';\r\n\r\nconst Game = (props) => {\r\n\r\nreturn (\r\n    <div className=\"Game\">\r\n        <p onClick={props.click}>I'm {props.name} and number of players is: {props.playersNumber}</p>\r\n        <img src={props.img} alt=\"\"></img>\r\n        <p>{props.children}</p>\r\n    </div>\r\n\r\n)\r\n};\r\n\r\nexport default Game;","import React from 'react';\r\n\r\n\r\nconst LogPanel = (props) => {\r\n\r\nconst loading=props.submitting\r\n\r\nreturn (\r\n    <div className=\"LogPanel\">\r\n        <p>Username:</p>\r\n        <input type= \"text\" onChange={props.changedUsername} />\r\n        {/*<p>Password:</p>\r\n        <input type= \"password\" onChange={props.changedPassword} />*/}\r\n        <h5></h5>\r\n        <button className=\"loginButton\" onClick={props.submit} disabled={loading}>\r\n        {loading && (<i\r\n              className=\"fa fa-refresh fa-spin\"\r\n              style={{ marginRight: \"5px\" }}\r\n            />\r\n          )}\r\n          {loading && <span>Logging in</span>}\r\n          {!loading && <span>Log in</span>}\r\n        </button>\r\n        {props.wrongLoginData===true && <p style={{color:'red'}}>Wrong login data</p>}\r\n        <p>{props.children}</p>\r\n    </div>\r\n    );\r\n\r\n};\r\n\r\nexport default LogPanel;","import React from 'react';\r\n\r\n\r\nconst RegistrationPanel = (props) => {\r\n\r\nconst loading=props.submitting\r\n\r\nreturn (\r\n    <div className=\"RegistrationPanel\">\r\n        <p>Username:</p>\r\n        <input type= \"text\" onChange={props.changedUsername} />\r\n        {/*<p>Password:</p>\r\n        <input type= \"password\" onChange={props.changedPassword} />*/}\r\n        <h5></h5>\r\n        <button className=\"registrationButton\" onClick={props.register} disabled={loading}>\r\n        {loading && (<i\r\n              className=\"fa fa-refresh fa-spin\"\r\n              style={{ marginRight: \"5px\" }}\r\n            />\r\n          )}\r\n          {loading && <span>Registering</span>}\r\n          {!loading && <span>Register</span>}\r\n        </button>\r\n        {props.unavaliableUsername===true && <p style={{color:'red'}}>That username is unavaliable</p>}\r\n        <p>{props.children}</p>\r\n    </div>\r\n    );\r\n\r\n};\r\n\r\nexport default RegistrationPanel;","import React, { Component } from 'react';\r\nimport Game from './Game/Game';\r\nimport axios from 'axios';\r\nimport LogPanel from './LogPanel/LogPanel';\r\nimport RegistrationPanel from './RegistrationPanel/RegistrationPanel'\r\nimport Axios from 'axios';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state={\r\n      games:[],\r\n      users:[],\r\n      usersLoaded : false,\r\n      gamesListLoaded : false,\r\n      isLogged : false,\r\n      isRegistered: false,\r\n      wantRegister : true,\r\n      username : null,\r\n      password : null,\r\n      loading : false,\r\n      wrongLoginData : false,\r\n      unavaliableUsername : false\r\n\r\n    }\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    //let uTest='https://rickandmortyapi.com/api/character/187'\r\n    let uGamesList='https://cors-anywhere.herokuapp.com/http://boardgames1.herokuapp.com/games/?fbclid=IwAR37IdjpLC4RmLuN1wSehM1DtarmIavEGkcy7SMh-kf_lsIEVp0r3DeyaXY'\r\n    axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest'\r\n    axios.get(uGamesList)\r\n      .then(response => {\r\n        this.setState({\r\n          games:response.data,\r\n          gamesListLoaded:true\r\n        });\r\n      });\r\n    let uLog='https://boardgames1.herokuapp.com/register/'\r\n    const article = {\"username\": \"foo-user2\"};\r\n    \r\n    async function postData(url = '', data = {}) {\r\n      const response = await fetch(url, {\r\n        method: 'POST', // *GET, POST, PUT, DELETE, etc.\r\n        mode: 'no-cors', // no-cors, *cors, same-origin\r\n        cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n        headers: {\r\n          'Content-Type': 'text/plain',\r\n          },\r\n        body: data // body data type must match \"Content-Type\" header\r\n      });\r\n      return response; // parses JSON response into native JavaScript objects\r\n    }\r\n    \r\n    /*\r\n    postData(uLog, article)\r\n      .then(response => {\r\n        console.log(response); // JSON data parsed by `data.json()` call\r\n      }).catch(error =>{console.log(error)});\r\n\r\n    */\r\n   this.setState({\r\n    usersLoaded:true\r\n  });\r\n   \r\n\r\n  }\r\n\r\n  submitRegisterHandler(event) {\r\n    this.setState({isRegistered: true});\r\n    this.setState({isLogged: true});\r\n    this.setState({wantRegister: false});\r\n    this.setState({wrongLoginData : false})\r\n      \r\n   \r\n  }\r\n\r\n  submitHandler(event) {\r\n    this.setState({ loading: true });\r\n    \r\n    const username = this.state.username;\r\n    //const users = this.state.users\r\n\r\n    this.state.users.map(user => { \r\n      if (username===user.username){\r\n        this.setState({ loading: false });\r\n        this.setState({isLogged: true});\r\n        this.setState({wrongLoginData : false})\r\n      };\r\n    });\r\n    if (this.state.isLogged===false){\r\n      this.setState({ loading: false });\r\n      this.setState({wrongLoginData : true});\r\n\r\n    }\r\n  }\r\n\r\n  usernameChangeHandler(event) {\r\n    const logData = {\r\n      ...this.state\r\n    };\r\n    logData.username = event.target.value;\r\n    this.setState({username: logData.username})\r\n  }\r\n\r\n  passwordChangeHandler(event) {\r\n    const logData = {\r\n      ...this.state\r\n    };\r\n    logData.password = event.target.value;\r\n    this.setState({password: logData.password})\r\n  }\r\n \r\n\r\n\r\n  render () {\r\n\r\n    const style = {\r\n      color: '#0D0A0B',\r\n    };\r\n\r\n    const games = this.state.games.map(game => { \r\n      return <Game name={game.name} playersNumber={game.playersNumber} img={game.imgUrl}/>;\r\n    });\r\n\r\n    //var {gamesListLoaded, gs} = this.setState;\r\n\r\n    if(this.state.wantRegister===false && this.state.isRegistered===false && this.state.isLogged===false){\r\n      return(\r\n        <div className=\"App\">\r\n          <h1 style={style} >Hi, welcome to BoardGames!</h1>\r\n          <LogPanel\r\n          changedUsername={(event)=> this.usernameChangeHandler(event)}\r\n          /*changedPassword={(event)=> this.passwordChangeHandler(event)}*/\r\n          submit={(event) =>this.submitHandler(event)}\r\n          submitting={this.state.loading}\r\n          wrongLoginData={this.state.wrongLoginData}></LogPanel>\r\n        </div>\r\n      );\r\n    }\r\n    else if (this.state.wantRegister===true && this.state.isLogged===false && this.state.isRegistered===false ) {\r\n      return(\r\n        <div className=\"App\">\r\n          <h1 style={style} >Hi, welcome to BoardGames!</h1>\r\n          <RegistrationPanel\r\n          changedUsername={(event)=> this.usernameChangeHandler(event)}\r\n          /*changedPassword={(event)=> this.passwordChangeHandler(event)}*/\r\n          register={(event) =>this.submitRegisterHandler(event)}\r\n          submitting={this.state.loading}\r\n          unavaliableUsername={this.state.unavaliableUsername}></RegistrationPanel>\r\n        </div>\r\n      );\r\n    }\r\n    else if (this.state.gamesListLoaded===false || this.state.usersLoaded===false ) {\r\n      return <div>Loading..</div>;\r\n    }\r\n    else{\r\n      return (\r\n        <div className=\"App\">\r\n          <h1 style={style} >Hi {this.state.username}, welcome to BoardGames!</h1>\r\n          <h1 style={style}> That's your games:</h1>\r\n          {games}\r\n\r\n        </div>\r\n    );\r\n    }  \r\n  }\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}