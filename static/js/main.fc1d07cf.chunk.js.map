{"version":3,"sources":["Game/Game.js","LogPanel/LogPanel.js","App.js","serviceWorker.js","index.js"],"names":["Game","props","className","onClick","click","name","playersNumber","src","img","alt","children","LogPanel","loading","submitting","type","onChange","changedUsername","changedPassword","submit","disabled","style","marginRight","App","state","characters","isLoaded","isLogged","username","password","axios","defaults","headers","common","get","then","response","setState","data","event","this","setTimeout","logData","target","value","color","map","character","imgUrl","chars","usernameChangeHandler","passwordChangeHandler","submitHandler","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4SAeeA,G,MAZF,SAACC,GAEd,OACI,yBAAKC,UAAU,QACX,uBAAGC,QAASF,EAAMG,OAAlB,OAA8BH,EAAMI,KAApC,8BAAqEJ,EAAMK,eAC3E,yBAAKC,IAAKN,EAAMO,IAAKC,IAAI,KACzB,2BAAIR,EAAMS,a,gBCoBHC,EA1BE,SAACV,GAElB,IAAMW,EAAQX,EAAMY,WAEpB,OACI,yBAAKX,UAAU,YACX,wCACA,2BAAOY,KAAM,OAAOC,SAAUd,EAAMe,kBACpC,wCACA,2BAAOF,KAAM,WAAWC,SAAUd,EAAMgB,kBACxC,6BACA,4BAAQf,UAAU,cAAcC,QAASF,EAAMiB,OAAQC,SAAUP,GAChEA,GAAY,uBACPV,UAAU,wBACVkB,MAAO,CAAEC,YAAa,SAGzBT,GAAW,6CACVA,GAAW,yCAEf,2BAAIX,EAAMS,YCgFHY,E,kDAjGb,WAAYrB,GAAQ,IAAD,8BACjB,cAAMA,IACDsB,MAAM,CACTC,WAAW,GACXC,UAAW,EACXC,UAAW,EACXC,SAAW,KACXC,SAAW,KACXhB,SAAU,GARK,E,gEAaE,IAAD,OAGlBiB,IAAMC,SAASC,QAAQC,OAAO,oBAAsB,iBACpDH,IAAMI,IAFC,oJAGJC,MAAK,SAAAC,GACJ,EAAKC,SAAS,CACZZ,WAAWW,EAASE,KACpBZ,UAAS,S,oCAOHa,GAAQ,IAAD,OACnBC,KAAKH,SAAS,CAAExB,SAAS,IAGzB4B,YAAW,WACT,EAAKJ,SAAS,CAAExB,SAAS,IACzB,EAAKwB,SAAS,CAACV,UAAU,MACxB,Q,4CAGiBY,GACpB,IAAMG,EAAO,eACRF,KAAKhB,OAEVkB,EAAQd,SAAWW,EAAMI,OAAOC,MAChCJ,KAAKH,SAAS,CAACT,SAAUc,EAAQd,a,4CAGbW,GACpB,IAAMG,EAAO,eACRF,KAAKhB,OAEVkB,EAAQb,SAAWU,EAAMI,OAAOC,MAChCJ,KAAKH,SAAS,CAACR,SAAUa,EAAQb,a,+BAKxB,IAAD,OAEFR,EAAQ,CACZwB,MAAO,WAGHpB,EAAae,KAAKhB,MAAMC,WAAWqB,KAAI,SAAAC,GAC3C,OAAO,kBAAC,EAAD,CAAMzC,KAAMyC,EAAUzC,KAAMC,cAAewC,EAAUxC,cAAeE,IAAKsC,EAAUC,YAPpF,EAUgBR,KAAKH,SAAxBX,EAVG,EAUHA,SAVG,EAUOuB,MAEf,OAAyB,IAAtBT,KAAKhB,MAAMG,SAEV,yBAAKxB,UAAU,OACb,wBAAIkB,MAAOA,GAAX,8BACA,kBAAC,EAAD,CACAJ,gBAAiB,SAACsB,GAAD,OAAU,EAAKW,sBAAsBX,IACtDrB,gBAAiB,SAACqB,GAAD,OAAU,EAAKY,sBAAsBZ,IACtDpB,OAAQ,SAACoB,GAAD,OAAU,EAAKa,cAAcb,IACrCzB,WAAY0B,KAAKhB,MAAMX,YAIT,IAAXa,EACA,0CAIL,yBAAKvB,UAAU,OACb,wBAAIkB,MAAOA,GAAX,MAAuBmB,KAAKhB,MAAMI,SAAlC,4BACA,wBAAIP,MAAOA,GAAX,uBACCI,O,GAzFO4B,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fc1d07cf.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Game.css';\r\n\r\nconst Game = (props) => {\r\n\r\nreturn (\r\n    <div className=\"Game\">\r\n        <p onClick={props.click}>I'm {props.name} and number of players is: {props.playersNumber}</p>\r\n        <img src={props.img} alt=\"\"></img>\r\n        <p>{props.children}</p>\r\n    </div>\r\n\r\n)\r\n};\r\n\r\nexport default Game;","import React from 'react';\r\n\r\n\r\nconst LogPanel = (props) => {\r\n\r\nconst loading=props.submitting\r\n\r\nreturn (\r\n    <div className=\"LogPanel\">\r\n        <p>Username:</p>\r\n        <input type= \"text\" onChange={props.changedUsername}/>\r\n        <p>Password:</p>\r\n        <input type= \"password\" onChange={props.changedPassword}/>\r\n        <h5></h5>\r\n        <button className=\"loginButton\" onClick={props.submit} disabled={loading}>\r\n        {loading && (<i\r\n              className=\"fa fa-refresh fa-spin\"\r\n              style={{ marginRight: \"5px\" }}\r\n            />\r\n          )}\r\n          {loading && <span>Logging in</span>}\r\n          {!loading && <span>Log in</span>}\r\n        </button>\r\n        <p>{props.children}</p>\r\n    </div>\r\n    );\r\n\r\n};\r\n\r\nexport default LogPanel;","import React, { Component } from 'react';\nimport Game from './Game/Game';\nimport axios from 'axios';\nimport LogPanel from './LogPanel/LogPanel';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state={\n      characters:[],\n      isLoaded : false,\n      isLogged : false,\n      username : null,\n      password : null,\n      loading : false\n    }\n  }\n\n\n  componentDidMount() {\n    let u1='https://rickandmortyapi.com/api/character/187'\n    let u2='https://cors-anywhere.herokuapp.com/http://boardgames1.herokuapp.com/games/?fbclid=IwAR37IdjpLC4RmLuN1wSehM1DtarmIavEGkcy7SMh-kf_lsIEVp0r3DeyaXY'\n    axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest'\n    axios.get(u2)\n      .then(response => {\n        this.setState({\n          characters:response.data,\n          isLoaded:true\n        });\n      });\n      \n  \n  }\n\n  submitHandler(event) {\n    this.setState({ loading: true });\n    \n    //Faking API call here\n    setTimeout(() => {\n      this.setState({ loading: false });\n      this.setState({isLogged: true})\n    }, 1400);\n  }\n\n  usernameChangeHandler(event) {\n    const logData = {\n      ...this.state\n    };\n    logData.username = event.target.value;\n    this.setState({username: logData.username})\n  }\n\n  passwordChangeHandler(event) {\n    const logData = {\n      ...this.state\n    };\n    logData.password = event.target.value;\n    this.setState({password: logData.password})\n  }\n \n\n\n  render () {\n\n    const style = {\n      color: '#0D0A0B',\n    };\n\n    const characters = this.state.characters.map(character => { \n      return <Game name={character.name} playersNumber={character.playersNumber} img={character.imgUrl}/>;\n    });\n\n    var {isLoaded, chars} = this.setState;\n\n    if(this.state.isLogged===false){\n      return(\n        <div className=\"App\">\n          <h1 style={style} >Hi, welcome to BoardGames!</h1>\n          <LogPanel\n          changedUsername={(event)=> this.usernameChangeHandler(event)}\n          changedPassword={(event)=> this.passwordChangeHandler(event)}\n          submit={(event) =>this.submitHandler(event)}\n          submitting={this.state.loading}></LogPanel>\n        </div>\n      );\n    }\n    else if (isLoaded===false) {\n      return <div>Loading..</div>;\n    }\n    else{\n      return (\n        <div className=\"App\">\n          <h1 style={style} >Hi {this.state.username}, welcome to BoardGames!</h1>\n          <h1 style={style}> That's your games:</h1>\n          {characters}\n\n        </div>\n    );\n    }  \n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}