{"version":3,"sources":["app/user/duck/types.js","app/user/duck/actions.js","app/game/duck/types.js","app/game/duck/actions.js","app/game/components/Game/Game.js","app/game/components/GamesMatching/Room/Room.js","app/game/components/Games/szachy/szachy.js","app/game/components/Games/tictactoe/tictactoe.js","app/game/components/Games/tictactoe/WebSockets/config.js","app/game/components/GamesMatching/GameMatching.js","app/user/components/LogPanel/LogPanel.js","app/user/components/RegistrationPanel/RegistrationPanel.js","app/user/components/Cockpit/Cockpit.js","App.js","serviceWorker.js","app/user/duck/reducers.js","app/user/duck/index.js","app/game/duck/reducers.js","app/game/duck/index.js","reducers.js","store.js","index.js"],"names":["CHANGE_USERNAME","SET_ID","CHANGE_PASSWORD","GOTO_REGISTER","GOTO_LOGIN","SET_LOGGED_IN","FAILED_LOGIN","SET_REGISTERED","UNAVALIABLE_USERNAME","FAILED_REGISTRATION","LOAD_GAMES","LOAD_USERS","changeUsername","username","type","types","setID","id","userID","changePassword","password","gotoRegister","gotoLogin","setLoggedIn","failedLogin","setRegistered","unavaliableUsername","failedRegistration","loadGames","games","loadUsers","users","matches","roomID","roomGameName","roomGameID","players","maxPlayers","gameName","gameID","boardState","winnerMark","nextPlayer","mark","Game","console","log","this","props","name","gameURL","history","push","className","onClick","event","clicked","to","playersNumber","src","img","alt","children","Component","withRouter","Room","state","gameId","datakey","playersArray","isMatchJoined","matchesUnloaded","gameData","toString","axios","defaults","headers","common","get","then","response","i1","i2","loadMatches","data","tempJoinedMatch","length","userId","userSession","userData","joinMatch","initGame","fullLoadMatch","article","a","url","fetch","method","mode","cache","body","JSON","stringify","postData","status","loadMatchesFromServer","window","alert","sessionMetadata","roomData","clickedJoin","connect","gameSession","dispatch","actions","matchNotJoined","Szachy","Square","value","Board","i","squares","renderSquare","Tictactoe","ws","WebSocket","joinedRoom","firstMessage","sendMessage","message","send","error","Array","fill","stepNumber","setState","onopen","onmessage","evt","payload","finishGame","parse","winner","setMark","updateBoardState","prevState","currentPlayer","step","activePlayers","onclose","i0","WSBoardState","myMark","stepCurrent","lines","b","c","calculateWinner","moves","jumpTo","current","finished","handleClick","GameMatching","roomURL","matchesList","matchesListLoaded","map","room","index","key","fullDataLoaded","joinedGameID","clickedLeave","game","testWebsocket","testMatch","clickedCreateRoom","LogPanel","loading","submitting","onChange","changedUsername","onKeyPress","enterLogin","submit","disabled","style","marginRight","wrongLoginData","color","RegistrationPanel","_handleKeyDown","e","register","enterRegister","Cockpit","loadGamesFromServer","loadUsersFromServer","document","title","login","uLog","loggedTemp","user","sessionData","charCode","submitRegisterHandler","submitLoginHandler","gamesParams","imgUrl","loginMetadata","gamesListLoaded","usersLoaded","wantRegister","isRegistered","isLogged","target","enterLoginHandler","enterRegisterHandler","path","GameMatcher","gameActions","App","Boolean","location","hostname","match","INITIAL_STATE","userReducer","action","joinedGameName","gameReducer","rootReducer","combineReducers","composeEnhancers","composeWithDevTools","actionCreators","trace","traceLimit","store","createStore","app","StrictMode","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a3ec6a0c.chunk.js","sourcesContent":["const CHANGE_USERNAME = 'CHANGE_USERNAME'\r\nconst SET_ID = 'SET_ID'\r\nconst CHANGE_PASSWORD = 'CHANGE_PASSWORD'\r\nconst GOTO_REGISTER = 'GOTO_REGISTER'\r\nconst GOTO_LOGIN = 'GOTO_LOGIN'\r\nconst SET_LOGGED_IN = 'SET_LOGGED_IN'\r\nconst FAILED_LOGIN = 'FAILED_LOGIN'\r\nconst SET_REGISTERED = 'SET_REGISTERED'\r\nconst UNAVALIABLE_USERNAME = 'UNAVALIABLE_USERNAME'\r\nconst FAILED_REGISTRATION = 'FAILED_REGISTRATION'\r\nconst LOAD_GAMES = 'LOAD_GAMES'\r\nconst LOAD_USERS = 'LOAD_USERS'\r\n\r\nexport default {\r\n    CHANGE_USERNAME,\r\n    SET_ID,\r\n    CHANGE_PASSWORD,\r\n    GOTO_REGISTER,\r\n    GOTO_LOGIN,\r\n    SET_LOGGED_IN,\r\n    FAILED_LOGIN,\r\n    SET_REGISTERED,\r\n    UNAVALIABLE_USERNAME,\r\n    FAILED_REGISTRATION,\r\n    LOAD_GAMES,\r\n    LOAD_USERS\r\n}","import types from './types'\r\n\r\n\r\nconst changeUsername = username => ({type: types.CHANGE_USERNAME, username: username})\r\nconst setID = id => ({type: types.SET_ID, userID: id})\r\nconst changePassword = password => ({type: types.CHANGE_PASSWORD, password: password})\r\nconst gotoRegister = () => ({type: types.GOTO_REGISTER})\r\nconst gotoLogin = () => ({type: types.GOTO_LOGIN})\r\nconst setLoggedIn = () => ({type: types.SET_LOGGED_IN})\r\nconst failedLogin = () => ({type: types.FAILED_LOGIN})\r\nconst setRegistered = () => ({type: types.SET_REGISTERED})\r\nconst unavaliableUsername = () => ({type: types.UNAVALIABLE_USERNAME})\r\nconst failedRegistration = () => ({type: types.FAILED_REGISTRATION})\r\nconst loadGames = games => ({type: types.LOAD_GAMES, games: games})\r\nconst loadUsers = users => ({type: types.LOAD_USERS, users: users})\r\n\r\n\r\n\r\n\r\nexport default {\r\n    changeUsername,\r\n    setID,\r\n    changePassword,\r\n    gotoRegister,\r\n    gotoLogin,\r\n    setLoggedIn,\r\n    failedLogin,\r\n    setRegistered,\r\n    unavaliableUsername,\r\n    failedRegistration,\r\n    loadGames,\r\n    loadUsers\r\n}","const MATCHES_UNLOADED = 'MATCHES_UNLOADED'\r\nconst LOAD_MATCHES = 'LOAD_MATCHES'\r\nconst FULL_LOAD_MATCH = 'FULL_LOAD_MATCH'\r\nconst JOIN_MATCH = 'JOIN_MATCH'\r\nconst MATCH_NOT_JOINED = 'MATCH_NOT_JOINED'\r\nconst INIT_GAME = 'INIT_GAME'\r\nconst UPDATE_BOARDSTATE = 'UPDATE_BOARDSTATE'\r\nconst FINISH_GAME = 'FINISH_GAME'\r\nconst NEXT_PLAYER = 'NEXT_PLAYER'\r\nconst SET_MARK = 'SET_MARK'\r\n\r\nexport default {\r\n    MATCHES_UNLOADED,\r\n    LOAD_MATCHES,\r\n    FULL_LOAD_MATCH,\r\n    JOIN_MATCH,\r\n    MATCH_NOT_JOINED,\r\n    INIT_GAME,\r\n    UPDATE_BOARDSTATE,\r\n    FINISH_GAME,\r\n    NEXT_PLAYER,\r\n    SET_MARK\r\n}","import types from './types'\r\n\r\n\r\nconst matchesUnloaded = () => ({type: types.MATCHES_UNLOADED})\r\nconst loadMatches = matches => ({type: types.LOAD_MATCHES, matches: matches})\r\nconst fullLoadMatch = () => ({type: types.FULL_LOAD_MATCH})\r\nconst joinMatch = (roomID, roomGameName, roomGameID, players, maxPlayers) => ({type: types.JOIN_MATCH, roomID: roomID, roomGameName:roomGameName, roomGameID: roomGameID, players: players, maxPlayers: maxPlayers})\r\nconst matchNotJoined = () => ({type: types.MATCH_NOT_JOINED})\r\nconst initGame = (gameName, gameID) => ({type: types.INIT_GAME, gameName: gameName, gameID: gameID})\r\nconst updateBoardState = (boardState) => ({type: types.UPDATE_BOARDSTATE, boardState: boardState})\r\nconst finishGame = (winnerMark) => ({type: types.FINISH_GAME, winnerMark: winnerMark})\r\nconst nextPlayer = (nextPlayer) => ({type: types.NEXT_PLAYER, nextPlayer:nextPlayer})\r\nconst setMark = (mark) => ({type: types.SET_MARK, mark:mark})\r\n\r\nexport default {\r\n    matchesUnloaded,\r\n    loadMatches,\r\n    fullLoadMatch,\r\n    joinMatch,\r\n    matchNotJoined,\r\n    initGame,\r\n    updateBoardState,\r\n    finishGame,\r\n    nextPlayer,\r\n    setMark\r\n}","import React, {Component} from 'react';\r\nimport './Game.css';\r\nimport {\r\n//    BrowserRouter as Router,\r\n    withRouter,\r\n//    Switch,\r\n//    Route,\r\n    Link\r\n  } from \"react-router-dom\";\r\n\r\nclass Game extends Component {\r\n    clicked() {\r\n        console.log(this.props.name===\"Kółko i krzyżyk\")\r\n        var gameURL = \"/\"\r\n        if (this.props.name===\"Kółko i krzyżyk\"){\r\n            gameURL = \"/tictactoe\"\r\n        }\r\n        else{\r\n            gameURL = \"/\"+ this.props.name\r\n        }\r\n        this.props.history.push(gameURL)\r\n    }\r\n\r\n    render() {\r\n        var gameURL = \"/\"\r\n        if (this.props.name===\"Kółko i krzyżyk\"){\r\n            gameURL = \"/tictactoe\"\r\n        }\r\n        else{\r\n            gameURL = \"/\"+ this.props.name\r\n\r\n        }\r\n\r\n        return (\r\n                <div className=\"Game\">\r\n                    <p onClick={(event) => this.clicked(event)}>I'm\r\n                    <Link to={gameURL}> {this.props.name} </Link>\r\n                    and number of players is: {this.props.playersNumber}</p>\r\n                    <img src={this.props.img} alt=\"\"></img>\r\n                    <p>{this.props.children}</p>\r\n                </div>\r\n        \r\n        )\r\n\r\n    }\r\n\r\n};\r\n\r\nexport default withRouter(Game);","import React, {Component} from 'react';\r\nimport './Room.css';\r\nimport axios from 'axios';\r\n/*import Warcaby from '../../Games/warcaby/warcaby'\r\nimport Szachy from '../../Games/szachy/szachy'\r\nimport Tictactoe from '../../Games/tictactoe/tictactoe'*/\r\nimport {\r\n//    BrowserRouter as Router,\r\n    withRouter,\r\n//    Switch,\r\n//    Route,\r\n//    Link\r\n  } from \"react-router-dom\";\r\nimport {connect} from 'react-redux'\r\nimport actions from '../../../duck/actions'\r\n\r\nclass Room extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            gameId:this.props.gameId,\r\n            id:this.props.id,\r\n            datakey:this.props.datakey,\r\n            playersArray:this.props.players,\r\n            maxPlayers:this.props.maxPlayers,\r\n            isMatchJoined: false\r\n\r\n        };\r\n    }\r\n    componentDidMount() {\r\n      //console.log(\"JoinedRoom: \",this.props.joinedRoom)\r\n\r\n    }\r\n\r\n    componentDidUpdate() {\r\n      //console.log(\"JoinedRoom: \",this.props.joinedRoom)\r\n\r\n    }\r\n\r\n    loadMatchesFromServer() {\r\n      this.props.matchesUnloaded()\r\n      var num = this.props.gameData.gameID\r\n      //console.log(num)\r\n      //let gameURL = \"/\"+ this.props.name='https://cors-anywhere.herokuapp.com/https://boardgames1.herokuapp.com/games/?fbclid=IwAR37IdjpLC4RmLuN1wSehM1DtarmIavEGkcy7SMh-kf_lsIEVp0r3DeyaXY'\r\n      let gameURL = \"https://boardgames1.herokuapp.com/matches/\"+ num.toString()\r\n      axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest'\r\n      axios.get(gameURL)\r\n        .then(response => {\r\n          this.props.loadMatches(response.data.matches);\r\n          var i1;\r\n          var i2;\r\n          let tempJoinedMatch=false\r\n\r\n          console.log(response.data)\r\n          for (i1=0;i1<response.data.matches.length;i1++){\r\n            for (i2=0;i2<response.data.matches[i1].players.length; i2++){  \r\n              if (response.data.matches[i1].players[i2].userId===this.props.userSession.userData.userID) {\r\n                this.props.joinMatch(\r\n                  response.data.matches[i1].id,\r\n                  response.data.name,\r\n                  response.data.id,\r\n                  response.data.matches[i1].players,\r\n                  response.data.matches[i1].maxPlayers\r\n                );\r\n                tempJoinedMatch=true;\r\n                //console.log(\"LoadMatchesFromServer init: true\",response.data.name)\r\n                this.props.initGame(response.data.name, response.data.id);\r\n              }\r\n            }\r\n          }\r\n          if (tempJoinedMatch===false) {\r\n            this.props.initGame(this.props.games.name, this.props.games.id)\r\n          }\r\n          this.props.fullLoadMatch();\r\n        });\r\n      }\r\n\r\n    clickedJoin(event) {\r\n        let roomURL='https://boardgames1.herokuapp.com/join-match/'\r\n        const article = {\r\n            \"match\": this.state.id,\r\n            \"playerName\": this.props.userSession.userData.userID};\r\n        \r\n        console.log('Article')\r\n        console.log(article)\r\n    \r\n        async function postData(url = '', data = {}) {\r\n          const response = await fetch(url, {\r\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\r\n            mode: 'cors', // no-cors, *cors, same-origin\r\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              },\r\n            body: JSON.stringify(data) // body data type must match \"Content-Type\" header\r\n          });\r\n          return response; // parses JSON response into native JavaScript objects\r\n        }\r\n        \r\n        postData(roomURL, article).then(\r\n          response => { console.log(response.status);\r\n            if( response.status === 201){\r\n            console.log(\"Joined\");\r\n            this.loadMatchesFromServer();\r\n          }\r\n          else if (response.status === 500){\r\n            window.alert(\"You are already in room\");\r\n          }\r\n          else{\r\n            console.log(\"Problem z łącznością z serwerem\");\r\n            window.alert(\"Problem z łącznością z serwerem\")\r\n          }\r\n        });\r\n      }\r\n\r\n    render() {\r\n        \r\n        return (\r\n            <div className=\"text-and-button\">\r\n                    { this.props.sessionMetadata.isMatchJoined===false && <div className=\"Room\">\r\n                        <p>\r\n                        Room #{this.state.id} | \r\n                        players: [{this.props.roomData.matches[this.state.datakey].players.length}/{this.props.roomData.matches[this.state.datakey].maxPlayers}]</p>\r\n                        <button onClick={(event) => this.clickedJoin(event)} > join</button>\r\n                        <p>{this.props.children}</p>\r\n                    </div>}\r\n                </div>\r\n        \r\n        )\r\n\r\n    }\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  ...state.gameSession, //ew movies: state.movies,\r\n  userSession: {\r\n    ...state.userSession,\r\n  },\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  matchesUnloaded: () => dispatch(actions.matchesUnloaded()),\r\n  loadMatches: matches => dispatch(actions.loadMatches(matches)),\r\n  fullLoadMatch: () => dispatch(actions.fullLoadMatch()),\r\n  joinMatch: (roomID, roomGameName, roomGameID, players, maxPlayers) => dispatch(actions.joinMatch(roomID, roomGameName, roomGameID, players, maxPlayers)),\r\n  matchNotJoined: () => dispatch(actions.matchNotJoined()),\r\n  initGame: (gameName, gameID) => dispatch(actions.initGame(gameName, gameID)),\r\n\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Room));","import React, {Component} from 'react';\r\n//import {\r\n//    BrowserRouter as Router,\r\n//    withRouter,\r\n//    Switch,\r\n//    Route,\r\n//    Link\r\n//  } from \"react-router-dom\";\r\nimport \"./szachy.css\"\r\n\r\nclass Szachy extends Component {\r\n    render () {\r\n        return (\r\n            <div className=\"Szachy\">\r\n                <p>Szachy bejbo</p>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Szachy;","import React, {Component} from 'react';\r\nimport {\r\n    withRouter,\r\n  } from \"react-router-dom\";\r\nimport { WS_BASE } from './WebSockets/config';\r\nimport { connect} from 'react-redux'\r\nimport actions from '../../../duck/actions'\r\n\r\nimport \"./tictactoe.css\"\r\n\r\nfunction Square(props) {\r\nreturn (\r\n    <button className=\"square\" onClick={props.onClick}>\r\n    {props.value}\r\n    </button>\r\n);\r\n}\r\n\r\nclass Board extends Component {  \r\n  renderSquare(i) {\r\n    if (typeof this.props.squares !== 'undefined') {\r\n     \r\n      return (\r\n          <Square\r\n            value={this.props.squares[i]}\r\n            onClick={() => this.props.onClick(i)}\r\n          />\r\n        );\r\n      }\r\n    }\r\n      render() {\r\n        //console.log(\"Board props:\", this.props);\r\n        return (\r\n          <div>\r\n            <div className=\"board-row\">\r\n              {this.renderSquare(0)}\r\n              {this.renderSquare(1)}\r\n              {this.renderSquare(2)}\r\n            </div>\r\n            <div className=\"board-row\">\r\n              {this.renderSquare(3)}\r\n              {this.renderSquare(4)}\r\n              {this.renderSquare(5)}\r\n            </div>\r\n            <div className=\"board-row\">\r\n              {this.renderSquare(6)}\r\n              {this.renderSquare(7)}\r\n              {this.renderSquare(8)}\r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n};\r\n\r\nclass Tictactoe extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    boardState: Array(9).fill(null),\r\n    stepNumber: 0,\r\n    nextPlayer: true\r\n    };\r\n  }\r\n\r\n  ws = new WebSocket(WS_BASE+this.props.roomData.joinedRoom.toString());\r\n  firstMessage = true; \r\n  componentDidMount() {\r\n    console.log(\"Tictactoe props: \",this.props)\r\n    this.setState({\r\n      ...this.state,\r\n      boardState: this.props.roomData.boardState,\r\n      nextPlayer: this.props.roomData.nextPlayer\r\n    })\r\n    //open ws\r\n    this.ws.onopen = () => {\r\n      console.log('connected')\r\n      }\r\n\r\n    this.ws.onmessage = evt => {\r\n      let payload;\r\n      if (this.props.roomData.finishGame){ \r\n        console.log(\"Server finished data\",evt.data)\r\n        payload = JSON.parse(evt.data);\r\n        this.props.finishGame(payload.winner); \r\n        this.winner = payload.winner;\r\n        return null;\r\n      } else if (this.firstMessage==true) {\r\n        payload = JSON.parse(evt.data); \r\n        console.log(\"Server initial data\",payload)\r\n        this.firstMessage = false\r\n        if (payload.data.players[0].userId === this.props.userSession.userData.userID) {\r\n          this.props.setMark(payload.data.players[0].mark)\r\n        } else if (payload.data.players[1].userId === this.props.userSession.userData.userID) {\r\n          this.props.setMark(payload.data.players[1].mark)\r\n        } else {\r\n          console.log(\"Warning: no mark assigned\")\r\n        }\r\n        this.props.updateBoardState(payload.data.state);    \r\n\r\n        this.setState((prevState, props) => {\r\n          return { \r\n            boardState: payload.data.state, \r\n            nextPlayer: payload.data.currentPlayer,\r\n            step:0\r\n          };\r\n        });\r\n        this.props.nextPlayer(payload.data.currentPlayer);\r\n        let status_finished=\"FINISHED\";\r\n        if (payload.data.status===status_finished) {\r\n            this.props.finishGame(null);\r\n        };\r\n      } else {\r\n        payload = JSON.parse(evt.data);\r\n        console.log(\"Server data update\",payload)\r\n        if (this.props.roomData.activePlayers[0][\"userId\"] === this.props.userSession.userData.userID) {\r\n          this.props.setMark(this.props.roomData.activePlayers[0].mark)\r\n        } else if (this.props.roomData.activePlayers[1][\"userId\"] === this.props.userSession.userData.userID) {\r\n          this.props.setMark(this.props.roomData.activePlayers[1].mark)\r\n        } else {\r\n          console.log(\"Warning: no mark assigned\")\r\n        }\r\n        if (typeof payload.data !== 'undefined'){\r\n          payload=payload.data;\r\n        }\r\n        this.props.updateBoardState(payload.state);\r\n        this.setState((prevState, props) => {\r\n          return { \r\n            boardState: payload.state, \r\n            nextPlayer: payload.currentPlayer,\r\n            step:0\r\n          };\r\n        });\r\n        \r\n        console.log(\"Payload data state update\", payload.state)\r\n\r\n        this.props.nextPlayer(payload.currentPlayer);\r\n        \r\n        let status_finished=\"FINISHED\";\r\n        if (payload.status===status_finished) {\r\n            this.props.finishGame();\r\n        };\r\n      }  \r\n    }\r\n\r\n    this.ws.onclose = () => {\r\n      console.log('disconnected')\r\n      // automatically try to reconnect on connection loss\r\n\r\n    }\r\n  }\r\n\r\n  sendMessage=(data)=>{\r\n    try {\r\n      const message = {\r\n        \"boardState\":data.state[\"boardState\"],\r\n        \"playerId\": this.props.userSession.userData.userID\r\n      };\r\n      console.log(\"Send\", JSON.stringify(message));\r\n      this.ws.send(JSON.stringify(message)); //send data to the server\r\n    } catch (error) {\r\n        console.log(error) // catch error\r\n    }\r\n}\r\n\r\n  handleClick(i) {\r\n    const squares = this.props.roomData.boardState;\r\n    console.log(squares);\r\n    if (this.props.roomData.nextPlayer !== this.props.userSession.userData.userID) {\r\n      console.log(\"It's not your turn\");\r\n      return null;\r\n    };\r\n    var i0;\r\n    let WSBoardState=\"\";\r\n    for (i0 = 0; i0 < 9; i0++) {\r\n      if (i0==i) {\r\n        WSBoardState+=this.props.roomData.myMark;\r\n      }\r\n      else {\r\n        WSBoardState+=squares[i0]\r\n      }\r\n    }\r\n    console.log(WSBoardState)\r\n    this.sendMessage({\r\n      username: this.props.userSession.userData.username,\r\n      state: { \"boardState\": WSBoardState}\r\n    })\r\n    const stepCurrent = this.state.stepNumber;\r\n    if (calculateWinner(WSBoardState)) {\r\n      this.props.finishGame()\r\n      return;\r\n    }\r\n    if (this.props.roomData.myMark===\"X\"){\r\n      this.setState({\r\n      boardState: WSBoardState,\r\n      stepNumber: stepCurrent+1,\r\n      nextPlayer: \"O\"\r\n      });\r\n    }\r\n    else {\r\n      this.setState({\r\n      boardState: WSBoardState,\r\n      stepNumber: stepCurrent+1,\r\n      nextPlayer: \"X\"\r\n      }); \r\n    }\r\n  }\r\n\r\n  jumpTo(step) {\r\n    this.setState({\r\n      boardState: {squares: Array(9).fill(null)},\r\n      stepNumber: step,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const moves = <button onClick={() => this.jumpTo(0)}>Go to game start</button>\r\n    let status;\r\n    let current = this.state.boardState;\r\n    if (this.props.roomData.finished) {\r\n      status = \"Winner: \" + this.props.roomData.winnerMark;\r\n    } else {\r\n      status = \"Next player: \" + (this.props.roomData.nextPlayer);\r\n    }\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        { this.props.roomData.finished? \r\n          <p>Finished</p>:\r\n          <div className=\"game-board\">\r\n            <br></br>\r\n            <br></br>\r\n            <Board\r\n              squares={current}\r\n              onClick={i => this.handleClick(i)}\r\n            />\r\n            <br></br>\r\n          </div>\r\n        }\r\n        <div className=\"game-info\">\r\n          <br></br>\r\n          <br></br>\r\n          <div>{status}</div>\r\n            <br></br>\r\n          <div>{moves}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n  ...state.gameSession, //ew movies: state.movies,\r\n  userSession: {\r\n    ...state.userSession,\r\n  },\r\n  joinedRoom: {\r\n    ...state.gameSession.roomData.joinedRoom,\r\n  }\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  matchesUnloaded: () => dispatch(actions.matchesUnloaded()),\r\n  loadMatches: matches => dispatch(actions.loadMatches(matches)),\r\n  fullLoadMatch: () => dispatch(actions.fullLoadMatch()),\r\n  joinMatch: (roomID, players, maxPlayers) => dispatch(actions.joinMatch(roomID, players, maxPlayers)),\r\n  matchNotJoined: () => dispatch(actions.matchNotJoined()),\r\n  finishGame: (winnerMark) => dispatch(actions.finishGame(winnerMark)),\r\n  updateBoardState: (boardState) => dispatch(actions.updateBoardState(boardState)),\r\n  nextPlayer: (nextPlayer) => dispatch(actions.nextPlayer(nextPlayer)),\r\n  setMark: (mark) => dispatch(actions.setMark(mark))\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Tictactoe));\r\n\r\n  \r\nfunction calculateWinner(squares) {\r\nconst lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n];\r\nfor (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] !== \"-\" && squares[b] !== \"-\" && squares[c] !== \"-\" ) {\r\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n        return squares[a];\r\n      }\r\n    }\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n  ","export const API_BASE = \"https://kowalikov.github.io/board-games-frontend/\"\r\nexport const WS_BASE = \"wss://boardgames1.herokuapp.com/ws/match/\"","import React, {Component} from 'react';\r\nimport axios from 'axios';\r\nimport Room from './Room/Room';\r\nimport WebSocketProvider from '../Games/tictactoe/WebSockets/WebSocket'\r\n//import Warcaby from '../Games/warcaby/warcaby'\r\nimport Szachy from '../Games/szachy/szachy'\r\nimport Tictactoe from '../Games/tictactoe/tictactoe'\r\n///import './GameMatching.css';\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {connect} from 'react-redux'\r\nimport actions from '../../duck/actions'\r\n\r\n\r\nclass GameMatching extends Component {\r\n\r\n  loadMatchesFromServer() {\r\n    this.props.matchesUnloaded()\r\n    var num = this.props.games.id\r\n    //console.log(num)\r\n    //let gameURL = \"/\"+ this.props.name='https://cors-anywhere.herokuapp.com/https://boardgames1.herokuapp.com/games/?fbclid=IwAR37IdjpLC4RmLuN1wSehM1DtarmIavEGkcy7SMh-kf_lsIEVp0r3DeyaXY'\r\n    let gameURL = \"https://boardgames1.herokuapp.com/matches/\"+ num.toString()\r\n    axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest'\r\n    axios.get(gameURL)\r\n      .then(response => {\r\n        this.props.loadMatches(response.data.matches);\r\n        var i1;\r\n        var i2;\r\n        let tempJoinedMatch=false\r\n        //console.log(response.data)\r\n        for (i1=0;i1<response.data.matches.length;i1++){\r\n          for (i2=0;i2<response.data.matches[i1].players.length; i2++){  \r\n            if (response.data.matches[i1].players[i2].userId===this.props.userSession.userData.userID) {\r\n              this.props.joinMatch(\r\n                response.data.matches[i1].id,\r\n                response.data.name,\r\n                response.data.id,\r\n                response.data.matches[i1].players,\r\n                response.data.matches[i1].maxPlayers\r\n              );\r\n              tempJoinedMatch=true;\r\n              //console.log(\"LoadMatchesFromServer init: true\",response.data.name)\r\n              this.props.initGame(response.data.name, response.data.id);\r\n            }\r\n          }\r\n        }\r\n        if (tempJoinedMatch===false) {\r\n          this.props.initGame(this.props.games.name, this.props.games.id)\r\n        }\r\n        this.props.fullLoadMatch();\r\n      });\r\n    }\r\n\r\n  componentDidMount() {\r\n    this.loadMatchesFromServer();\r\n  }\r\n\r\n\r\n  game() {\r\n    if (this.props.gameData.gameID===1){\r\n      return (\r\n      //<WebSocketProvider>\r\n        <Tictactoe/>\r\n      //</WebSocketProvider>\r\n      )\r\n    }\r\n    else{ //jak się przyjmie to przenieść tutaj provider\r\n        return  <Szachy/>   \r\n    }\r\n  }\r\n\r\n  testWebsocket() {\r\n    console.log(\"Sprawdzam ostatni stan\")\r\n    this.state.ws.sendMessage({\r\n      username: this.props.userSession.userData.username,\r\n      state: { \"boardState\": \"--------X\"}\r\n    })\r\n    console.log(\"State from the store: \", this.props.roomData.boardState)\r\n  }\r\n  testMatch() {\r\n    var num = this.props.roomData.joinedRoom;\r\n    //console.log(num)\r\n    //let gameURL = \"/\"+ this.props.name='https://cors-anywhere.herokuapp.com/https://boardgames1.herokuapp.com/games/?fbclid=IwAR37IdjpLC4RmLuN1wSehM1DtarmIavEGkcy7SMh-kf_lsIEVp0r3DeyaXY'\r\n    let gameURL = \"https://boardgames1.herokuapp.com/roomdetail/\"+ num.toString()\r\n    axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest'\r\n    axios.get(gameURL)\r\n      .then(response => {\r\n       console.log(\"TestMatch info: \", response.data)\r\n      });\r\n  }\r\n    \r\n    \r\n  clickedCreateRoom(event){\r\n    let roomURL='https://boardgames1.herokuapp.com/creatematch/'\r\n    const article = {\r\n        \"game\": this.props.gameData.gameID,\r\n        \"maxPlayers\": 2};\r\n\r\n    async function postData(url = '', data = {}) {\r\n      const response = await fetch(url, {\r\n        method: 'POST', \r\n        mode: 'cors', \r\n        cache: 'no-cache', \r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          },\r\n        body: JSON.stringify(data) \r\n      });\r\n      return response; \r\n    }\r\n    \r\n    postData(roomURL, article).then(\r\n      response => { console.log(response.status);\r\n        if( response.status === 201){\r\n        console.log(\"Created\");\r\n        this.loadMatchesFromServer()\r\n      }\r\n      else if (response.status === 500){\r\n        window.alert(\"You are already in room\");\r\n      }\r\n      else{\r\n        console.log(\"Problem z łącznością z serwerem\");\r\n        window.alert(\"Problem z łącznością z serwerem\")\r\n      }\r\n    });\r\n  }\r\n\r\n  clickedLeave() {\r\n    let roomURL='https://boardgames1.herokuapp.com/leave-match/'+this.props.userSession.userData.userID.toString()\r\n    const article = {\r\n        \"userId\": this.props.userSession.userData.userID,\r\n        \"matchId\": this.props.roomData.joinedRoom\r\n      };\r\n    \r\n    console.log('Leave match of user:', article)\r\n\r\n    async function postData(url = '', data = {}) {\r\n      const response = await fetch(url, {\r\n        method: 'DELETE',\r\n        mode: 'cors', \r\n        cache: 'no-cache',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          },\r\n        body: JSON.stringify(data) \r\n      });\r\n      return response; \r\n    }\r\n    \r\n    postData(roomURL, article).then(\r\n      response => {\r\n        if( response.status === 204){\r\n        console.log(\"Room left: \", response.status);\r\n        this.loadMatchesFromServer()\r\n        this.props.matchNotJoined();\r\n      }\r\n      else if (response.status === 500){\r\n        window.alert(\"You are in no room\");\r\n      }\r\n      else{\r\n        console.log(\"Problem z łącznością z serwerem\");\r\n        window.alert(\"Problem z łącznością z serwerem\")\r\n      }\r\n    \r\n    });\r\n  }\r\n\r\n  render() {\r\n    //gotowy skopiowany kod z App.js do wylistowania matchy i dołączenia do nich\r\n    //dodać zmianę stanu pokoi na kliknięcie\r\n    //dołączenie i dopiero potem renderowanie gry\r\n    //zrobić to zmienną joinedMatch w stanie klasy w tym pliku\r\n    \r\n    let matchesList\r\n    if (this.props.sessionMetadata.matchesListLoaded) {\r\n      matchesList = this.props.roomData.matches.map((room, index) => { \r\n        return <Room\r\n          gameId={this.props.gameData.gameID} \r\n          id={room.id}\r\n          key={index}\r\n          datakey={index}\r\n          maxPlayers={room.maxPlayers}\r\n          players={room.players}\r\n          />;\r\n      });\r\n    }\r\n\r\n    return(\r\n        <div className=\"GameMatching\">\r\n          { (this.props.sessionMetadata.matchesListLoaded)===false && <h2>Loading room...</h2>\r\n          }\r\n          { this.props.sessionMetadata.matchesListLoaded && this.props.sessionMetadata.isMatchJoined && this.props.sessionMetadata.fullDataLoaded && this.props.gameData.gameID===this.props.roomData.joinedGameID && typeof this.props.roomData.activePlayers!== 'undefined' ? \r\n            <div className=\"Room\">\r\n              <br></br>\r\n              <button className=\"button button1\" onClick={(event) => this.clickedLeave(event)} > Leave</button>\r\n              <p>\r\n                Room #{this.props.roomData.joinedRoom} | \r\n                players: [{this.props.roomData.activePlayers.length}/{this.props.roomData.maxPlayers}]</p>\r\n              <div>\r\n                {this.game()}\r\n                <button className=\"WebsocketTest\" onClick={(event) => this.testWebsocket()}>Test WebSocket</button>\r\n                <button className=\"MatchTest\" onClick={(event) => this.testMatch()}>Get Match info</button>\r\n              </div> \r\n              <br></br>\r\n            </div>:\r\n            <div>\r\n              {this.props.sessionMetadata.matchesListLoaded && this.props.sessionMetadata.isMatchJoined && this.props.sessionMetadata.fullDataLoaded && this.props.gameData.gameID!==this.props.roomData.joinedGameID ?\r\n              <p>You are already in the game</p>:<br></br>}\r\n            </div>\r\n          }\r\n          { this.props.sessionMetadata.matchesListLoaded && !this.props.sessionMetadata.isMatchJoined ? \r\n            <div>\r\n              <button className=\"button Create-Room\" onClick={(event) => this.clickedCreateRoom(event)} >Create room</button>\r\n              <br></br>\r\n              {matchesList}\r\n            </div>:<p></p>\r\n          }\r\n        </div>\r\n    )\r\n\r\n  }\r\n\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  ...state.gameSession, //ew movies: state.movies,\r\n  userSession: {\r\n    ...state.userSession,\r\n  },\r\n})\r\n\r\n\r\n\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  matchesUnloaded: () => dispatch(actions.matchesUnloaded()),\r\n  loadMatches: matches => dispatch(actions.loadMatches(matches)),\r\n  fullLoadMatch: () => dispatch(actions.fullLoadMatch()),\r\n  joinMatch: (roomID, roomGameName, roomGameID, players, maxPlayers) => dispatch(actions.joinMatch(roomID, roomGameName, roomGameID, players, maxPlayers)),\r\n  matchNotJoined: () => dispatch(actions.matchNotJoined()),\r\n  initGame: (gameName, gameID) => dispatch(actions.initGame(gameName, gameID)),\r\n  updateBoardState: (boardState) => dispatch(actions.updateBoardState(boardState)),\r\n  finishGame: (winnerMark) => dispatch(actions.finishGame(winnerMark)),\r\n  nextPlayer: (nextPlayer) => dispatch(actions.nextPlayer(nextPlayer))\r\n\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(GameMatching));","import React, {Component} from 'react';\r\nimport './LogPanel.css'\r\n\r\nclass LogPanel extends Component {\r\n\r\n  render (){\r\n    const loading=this.props.submitting  \r\n    return (\r\n      <div className=\"LogPanel\">\r\n          <p>Username:</p>\r\n          <input type= \"text\" onChange={this.props.changedUsername} onKeyPress={this.props.enterLogin} />\r\n          {/*<p>Password:</p>\r\n          <input type= \"password\" onChange={props.changedPassword} />*/}\r\n          <br></br>\r\n          <br></br>\r\n          \r\n          <button className=\"loginButton\" onClick={this.props.submit} disabled={loading}>\r\n          {loading && (<i\r\n                className=\"fa fa-refresh fa-spin\"\r\n                style={{ marginRight: \"5px\" }}\r\n              />\r\n            )}\r\n            {loading && <span>Logging in</span>}\r\n            {!loading && <span>Log in</span>}\r\n          </button>\r\n          {this.props.wrongLoginData===true && <p style={{color:'red'}}>Wrong login data</p>}\r\n          <br></br>\r\n          <br></br>\r\n          <button className=\"gotoRegisterButton\" onClick={this.props.gotoRegister} >\r\n          Sign in\r\n          </button>\r\n          <p>{this.props.children}</p>\r\n      </div>\r\n      );\r\n  }\r\n};\r\n\r\nexport default LogPanel;","import React, {Component} from 'react';\r\nimport './RegistrationPanel.css'\r\n\r\nclass RegistrationPanel extends Component {\r\n  _handleKeyDown = (e) => {\r\n      if (e.key === 'Enter') {\r\n        return (this.props.register) \r\n      } \r\n  }\r\n  render(){\r\n    const loading=this.props.submitting\r\n\r\n    return (\r\n      <div className=\"RegistrationPanel\">\r\n          <p>Username:</p>\r\n          <input type= \"text\" onChange={this.props.changedUsername} onKeyPress={this.props.enterRegister} />\r\n          {/*<p>Password:</p>\r\n          <input type= \"password\" onChange={this.props.changedPassword} />*/}\r\n          <br></br>\r\n          <br></br>\r\n          <button className=\"registrationButton\" onClick={this.props.register}  disabled={loading}>\r\n          {loading && (<i\r\n                className=\"fa fa-refresh fa-spin\"\r\n                style={{ marginRight: \"5px\" }}\r\n              />\r\n            )}\r\n            {loading && <span>Registering</span>}\r\n            {!loading && <span>Register</span>}\r\n          </button>\r\n          {this.props.unavaliableUsername===true && <p style={{color:'red'}}>That username is unavaliable</p>}\r\n          <br></br>\r\n          <br></br>\r\n          <button className=\"gotoLoginButton\" onClick={this.props.gotoLogin} >\r\n          Login screen\r\n          </button>\r\n          <p>{this.props.children}</p>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default RegistrationPanel;","import React, {Component} from 'react';\r\nimport axios from 'axios';\r\nimport {\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\nimport {connect} from 'react-redux'\r\nimport actions from '../../duck/actions'\r\nimport gameActions from '../../../game/duck/actions'\r\nimport './Cockpit.css'\r\nimport Game from '../../../game/components/Game/Game';\r\nimport GameMatching from '../../../game/components/GamesMatching/GameMatching'\r\nimport LogPanel from '../LogPanel/LogPanel';\r\nimport RegistrationPanel from '../RegistrationPanel/RegistrationPanel'\r\n\r\nclass Cockpit extends Component {\r\n  \r\n  componentDidMount() {\r\n    //console.log(\"props\", this.props)\r\n    this.loadGamesFromServer()\r\n    this.loadUsersFromServer()\r\n  }\r\n  componentDidUpdate() {\r\n    document.title = `${this.props.gameSession.gameData.gameName}`\r\n\r\n  }\r\n\r\n  loadGamesFromServer() {\r\n    let uGamesList='https://boardgames1.herokuapp.com/games/?fbclid=IwAR37IdjpLC4RmLuN1wSehM1DtarmIavEGkcy7SMh-kf_lsIEVp0r3DeyaXY'\r\n    axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest'\r\n    axios.get(uGamesList)\r\n      .then(response => {\r\n        this.props.loadGames(response.data);\r\n      });\r\n  }\r\n\r\n  loadUsersFromServer(login=false) {\r\n    let uLog='https://boardgames1.herokuapp.com/register/'\r\n    axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest'\r\n    axios.get(uLog)\r\n      .then(response => {\r\n        this.props.loadUsers(response.data);\r\n        if (login===true) {\r\n          const username = this.props.userData.username;\r\n          console.log(username, response.data);\r\n          let loggedTemp=false;\r\n          response.data.map(user => { \r\n            if (username===user.username){\r\n              this.props.setLoggedIn()\r\n              this.props.setID(user.id)\r\n              loggedTemp = true\r\n            }\r\n          });\r\n          if (loggedTemp===false) {\r\n            this.props.failedLogin()\r\n          }  \r\n            \r\n        }\r\n      });\r\n  }\r\n\r\n  submitRegisterHandler() {\r\n    let uReg='https://boardgames1.herokuapp.com/register/'\r\n    const article = {\"username\": this.props.userData.username};\r\n\r\n    async function postData(url = '', data = {}) {\r\n      const response = await fetch(url, {\r\n        method: 'POST', \r\n        mode: 'cors', \r\n        cache: 'no-cache', \r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          },\r\n        body: JSON.stringify(data) \r\n      });\r\n      return response; \r\n    }\r\n    \r\n    postData(uReg, article).then(\r\n      response => { console.log(response.status);\r\n        if( response.status === 201){ \r\n        console.log(\"Zarejestrowany\");\r\n        this.props.setRegistered(response.data);\r\n        this.loadUsersFromServer(true);\r\n      }\r\n      else if (response.status === 400){\r\n        console.log(\"Zła nazwa\");\r\n        this.props.unavaliableUsername();\r\n      }\r\n      else{ \r\n        console.log(\"Problem z łącznością z serwerem\");\r\n        this.props.failedRegistration();\r\n      }\r\n    });\r\n  }\r\n  \r\n  submitLoginHandler() {\r\n    const username = this.props.userData.username;    \r\n    let loggedTemp=false;\r\n    this.props.sessionData.users.map(user => { \r\n      if (username===user.username){\r\n        this.props.setLoggedIn()\r\n        this.props.setID(user.id)\r\n        loggedTemp=true\r\n      }\r\n    });\r\n    if (loggedTemp===false) {\r\n      this.props.failedLogin()\r\n    }\r\n  }\r\n\r\n  enterRegisterHandler(event) {\r\n    if (event.charCode === 13){\r\n      this.submitRegisterHandler();\r\n    }\r\n  }\r\n  \r\n  enterLoginHandler(event) {\r\n    if (event.charCode === 13){\r\n      this.submitLoginHandler();\r\n    }\r\n  }\r\n\r\n  GameMatcher(gamesParams) {\r\n    return <GameMatching games={gamesParams}/>\r\n  }\r\n\r\n  render () {\r\n\r\n    const style = {\r\n      color: '#0D0A0B',\r\n    };\r\n\r\n    const games = this.props.sessionData.games.map((game, index) => { \r\n        return <Game \r\n          name={game.name}\r\n          key={game.id}\r\n          playersNumber={game.playersNumber}\r\n          img={game.imgUrl}\r\n          />;\r\n    });\r\n\r\n    /*const switchToGames = this.props.sessionData.games.map((game, index) => { \r\n        return(\r\n          <Switch>\r\n            <Route path={game.name} exact component={game.name}/>\r\n          </Switch>\r\n        )\r\n    });*/\r\n\r\n    if (this.props.loginMetadata.gamesListLoaded===false || this.props.loginMetadata.usersLoaded===false ) { \r\n      return <div>Loading...</div>;\r\n    }\r\n    else if(this.props.loginMetadata.wantRegister===false && this.props.loginMetadata.isRegistered===false && this.props.loginMetadata.isLogged===false){ \r\n      return(\r\n        <div className=\"App\">\r\n          <h1 style={style} >Hi, welcome to BoardGames!</h1>\r\n          <LogPanel\r\n          changedUsername={(event)=> this.props.changeUsername(event.target.value)}\r\n          //changedPassword={(event)=> this.props.changePassword(event.target.value)} \r\n          submit={() =>this.submitLoginHandler()} \r\n          enterLogin={(event) => this.enterLoginHandler(event)}\r\n          submitting={this.props.loginMetadata.loading}\r\n          gotoRegister={() => this.props.gotoRegister()} \r\n          wrongLoginData={this.props.loginMetadata.wrongLoginData} \r\n          ></LogPanel> \r\n        </div>\r\n      );\r\n    }\r\n    else if (this.props.loginMetadata.wantRegister===true && this.props.loginMetadata.isLogged===false && this.props.loginMetadata.isRegistered===false ) { \r\n      return(\r\n        <div className=\"App\">\r\n          <h1 style={style} >Hi, welcome to BoardGames!</h1>\r\n          <RegistrationPanel\r\n          changedUsername={(event)=> this.props.changeUsername(event.target.value)} \r\n          //changedPassword={(event)=> this.props.changePassword(event.target.value)}\r\n          register={(event) =>this.submitRegisterHandler()} \r\n          enterRegister={(event) => this.enterRegisterHandler(event)}\r\n          submitting={this.props.loginMetadata.loading}\r\n          gotoLogin={() => this.props.gotoLogin()} \r\n          unavaliableUsername={this.props.loginMetadata.unavaliableUsername} \r\n          ></RegistrationPanel>\r\n        </div>\r\n      );\r\n    }\r\n    else{\r\n      ///const isMatched = \r\n      return (\r\n          <div className=\"App\">\r\n            <h1 style={style} >Hi {this.props.userData.username}, welcome to BoardGames!</h1>\r\n            <Link to={'/games'} onClick={() => {this.props.initGame('BoardGames', null);}}> Go to games </Link>\r\n            <h2> </h2>\r\n            <Switch>\r\n              <Route path={\"/games\"}>{games}</Route>\r\n              <Route path={\"/Warcaby\"}>{this.GameMatcher(this.props.sessionData.games[0])}</Route>\r\n              <Route path={\"/Szachy\"}>{this.GameMatcher(this.props.sessionData.games[1])}</Route>\r\n              <Route path={\"/tictactoe\"}>{this.GameMatcher(this.props.sessionData.games[0])}</Route>\r\n            </Switch>\r\n          </div>\r\n    );\r\n    }  \r\n  }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  ...state.userSession, //ew movies: state.movies,\r\n  gameSession: {\r\n    ...state.gameSession,\r\n  }\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  changeUsername: username => dispatch(actions.changeUsername(username)),\r\n  setID: id => dispatch(actions.setID(id)),\r\n  changePassword: password => dispatch(actions.changePassword(password)),\r\n  gotoRegister: () => dispatch(actions.gotoRegister()),\r\n  gotoLogin: () => dispatch(actions.gotoLogin()),\r\n  setLoggedIn: () => dispatch(actions.setLoggedIn()),\r\n  failedLogin: () => dispatch(actions.failedLogin()),\r\n  setRegistered: () => dispatch(actions.setRegistered()),\r\n  unavaliableUsername: () => dispatch(actions.unavaliableUsername()),\r\n  failedRegistration: () => dispatch(actions.failedRegistration()),\r\n  loadGames: games => dispatch(actions.loadGames(games)),\r\n  loadUsers: users => dispatch(actions.loadUsers(users)),\r\n  initGame: (gameName, gameID) => dispatch(gameActions.initGame(gameName, gameID)),\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Cockpit) //nie wiadomo czy zadziała","import React, { Component } from 'react';\r\nimport Cockpit from './app/user/components/Cockpit/Cockpit'\r\n\r\n\r\nclass App extends Component {\r\n  render () {\r\n    return(\r\n      <div className=\"App\">\r\n        <Cockpit/>\r\n      </div>\r\n    )    \r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import types from './types';\r\n\r\nconst INITIAL_STATE = {\r\n    userData: {\r\n      username : null,\r\n      userID: null,\r\n      password : null,\r\n    },\r\n    loginMetadata: {\r\n      isLogged : false,\r\n      isRegistered: false,\r\n      wantRegister : false,\r\n      loading : false,\r\n      wrongLoginData : false,\r\n      unavaliableUsername : false,\r\n      usersLoaded : false,\r\n      gamesListLoaded : false,\r\n    },\r\n    sessionData: {\r\n      games:[],\r\n      users:[],\r\n    }\r\n}\r\n\r\nconst userReducer = (state = INITIAL_STATE, action ) => { \r\n  switch (action.type){\r\n    case types.CHANGE_USERNAME: \r\n      return {\r\n        ...state, \r\n        userData: {\r\n          ...state.userData, \r\n          username: action.username\r\n        }\r\n      }\r\n    case types.SET_ID:\r\n      return {\r\n        ...state,\r\n        userData: {\r\n          ...state.userData,\r\n          userID: action.userID\r\n        }\r\n      }\r\n    case types.CHANGE_PASSWORD: \r\n      return {     \r\n        ...state,\r\n        userData: {\r\n          ...state.userData, \r\n          password: action.password\r\n        }\r\n      }\r\n    case types.GOTO_REGISTER:\r\n      return {\r\n        ...state,\r\n        loginMetadata: {\r\n          ...state.loginMetadata,\r\n          wantRegister: true,\r\n        }\r\n      }\r\n    case types.GOTO_LOGIN:\r\n      return {\r\n        ...state,\r\n        loginMetadata: {\r\n          ...state.loginMetadata,\r\n          wantRegister: false,\r\n        }\r\n      }\r\n    case types.SET_LOGGED_IN: {\r\n      return {\r\n        ...state,\r\n        loginMetadata: {\r\n          ...state.loginMetadata,\r\n          loading: false, //CO Z TYM?\r\n          isLogged: true,\r\n          wrongLoginData: false,\r\n        }\r\n      }\r\n    }\r\n    case types.FAILED_LOGIN: {\r\n      return {\r\n        ...state,\r\n        loginMetadata: {\r\n          ...state.loginMetadata,\r\n          loading: false, //CO Z TYM?\r\n          wrongLoginData: true,\r\n        }\r\n      }\r\n    }\r\n    case types.SET_REGISTERED:\r\n      return {\r\n        ...state,\r\n        loginMetadata: {\r\n          ...state.loginMetadata,\r\n          usersLoaded:true,\r\n          isLogged: true,\r\n          unavaliableUsername : false,\r\n          isRegistered: true,\r\n        }\r\n      }\r\n    case types.UNAVALIABLE_USERNAME:\r\n      return {\r\n        ...state,\r\n        loginMetadata: {\r\n          ...state.loginMetadata,\r\n          isLogged: false,\r\n          unavaliableUsername : true,\r\n          isRegistered: false,\r\n        }\r\n      }\r\n    case types.FAILED_REGISTRATION:\r\n      return {\r\n        ...state,\r\n        loginMetadata: {\r\n          ...state.loginMetadata,\r\n          isLogged: false,\r\n          unavaliableUsername : false,\r\n          isRegistered: false,\r\n        }\r\n      }\r\n    case types.LOAD_GAMES: \r\n      return {     \r\n        ...state,\r\n        loginMetadata: {\r\n          ...state.loginMetadata,\r\n          gamesListLoaded: true,\r\n        },\r\n        sessionData: {\r\n          ...state.sessionData, \r\n          games: action.games,\r\n        }\r\n      }\r\n    case types.LOAD_USERS: \r\n      return {     \r\n        ...state,\r\n        loginMetadata: {\r\n          ...state.loginMetadata,\r\n          usersLoaded: true,\r\n        },\r\n        sessionData: {\r\n          ...state.sessionData, \r\n          users: action.users,\r\n        }\r\n      }\r\n    default:\r\n        return state\r\n  }\r\n}\r\n\r\nexport default userReducer ","import userReducer from './reducers'\r\nexport {default as userTypes} from './types'\r\nexport {default as userActions} from './actions'\r\nexport default userReducer\r\n","import types from './types';\r\n\r\nconst INITIAL_STATE = {\r\n    gameData: {\r\n      gameName:'BoardGames', \r\n      gameID:null,\r\n    },\r\n    sessionMetadata: {\r\n      isMatchJoined:false,\r\n      fullDataLoaded:false,\r\n      matchesListLoaded:false,\r\n    },\r\n    roomData: {\r\n      joinedGameName: null,\r\n      joinedGameID: 0,\r\n      matches:[],\r\n      joinedRoom: null,\r\n      activePlayers: [],\r\n      maxPlayers:null,\r\n      boardState: [],\r\n      myMark: null,\r\n      nextPlayer: null,\r\n      finished: false,\r\n      winner: null,\r\n    }\r\n}\r\n\r\nconst gameReducer = (state = INITIAL_STATE, action ) => { \r\n  switch (action.type){\r\n    case types.MATCHES_UNLOADED:\r\n      return {\r\n        ...state,\r\n        sessionMetadata: {\r\n          ...state.sessionMetadata,\r\n          matchesListLoaded: false,\r\n          fullDataLoaded: false\r\n        }\r\n      }\r\n    case types.LOAD_MATCHES: \r\n      return {\r\n        ...state, \r\n        roomData: {\r\n          ...state.roomData, \r\n          matches: action.matches,\r\n        },\r\n        sessionMetadata: {\r\n          ...state.sessionMetadata,\r\n          matchesListLoaded: true,\r\n          //fullDataLoaded: true,\r\n        }\r\n      }\r\n    case types.FULL_LOAD_MATCH:\r\n      return {\r\n        ...state, \r\n        sessionMetadata: {\r\n          ...state.sessionMetadata,\r\n          fullDataLoaded: true,\r\n        }\r\n      }\r\n    case types.JOIN_MATCH: \r\n      return {     \r\n        ...state,\r\n        roomData: {\r\n          ...state.roomData,\r\n          joinedGameName: action.roomGameName,\r\n          joinedGameID: action.roomGameID, \r\n          joinedRoom: action.roomID,//\r\n          activePlayers: action.players,//\r\n          maxPlayers: action.maxPlayers,//\r\n        },\r\n        sessionMetadata: {\r\n          ...state.sessionMetadata,\r\n          isMatchJoined: true,\r\n        }\r\n      }\r\n    case types.MATCH_NOT_JOINED: \r\n      return { \r\n        ...state,\r\n        sessionMetadata: {\r\n          ...state.sessionMetadata,\r\n          isMatchJoined: false,\r\n          fullDataLoaded: false,\r\n        },\r\n        roomData: {\r\n          ...state.roomData,\r\n          joinedRoom: null,\r\n          activePlayers: [],\r\n          maxPlayers:null,\r\n          boardState: [],\r\n          finished: false,\r\n    \r\n        }\r\n      }\r\n    case types.INIT_GAME: \r\n      return {\r\n        ...state,\r\n        gameData: {\r\n          gameName: action.gameName,\r\n          gameID: action.gameID,\r\n        }\r\n      }\r\n    case types.UPDATE_BOARDSTATE:\r\n      return {\r\n        ...state,\r\n        roomData: {\r\n          ...state.roomData,\r\n          boardState: action.boardState,\r\n        }\r\n      }\r\n    case types.FINISH_GAME:\r\n      return { \r\n        ...state,\r\n        roomData: {\r\n          ...state.roomData,\r\n          finished: true,\r\n          winner: action.winnerMark,\r\n        }\r\n      }\r\n    case types.NEXT_PLAYER:\r\n    return { \r\n      ...state,\r\n      roomData: {\r\n        ...state.roomData,\r\n        nextPlayer: action.nextPlayer,\r\n      }\r\n    }\r\n    case types.SET_MARK:\r\n    return { \r\n      ...state,\r\n      roomData: {\r\n        ...state.roomData,\r\n        myMark: action.mark,\r\n      }\r\n    }\r\n    default:\r\n        return state\r\n  }\r\n}\r\n\r\nexport default gameReducer ","import gameReducer from './reducers'\r\nexport {default as gameTypes} from './types'\r\nexport {default as gameActions} from './actions'\r\nexport default gameReducer\r\n","import {combineReducers} from 'redux';\r\nimport userReducer from './app/user/duck/index';\r\nimport gameReducer from './app/game/duck/index';\r\n\r\nconst rootReducer = combineReducers ({\r\n    userSession: userReducer,\r\n    gameSession: gameReducer,\r\n})\r\n\r\nexport default rootReducer\r\n","import {createStore} from 'redux';\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\nimport rootReducer from './reducers';\r\nimport * as actionCreators from \"./app/user/duck/index\";\r\n\r\n\r\nconst composeEnhancers = composeWithDevTools({ \r\n  actionCreators, \r\n  trace: true, \r\n  traceLimit: 25 \r\n}); \r\n\r\nconst store = createStore(rootReducer, composeEnhancers())\r\n\r\nexport default store\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {BrowserRouter} from 'react-router-dom'\r\nimport {Provider} from 'react-redux';\r\nimport store from './store';\r\n\r\nconst app = (\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <BrowserRouter>\r\n                <App/>\r\n            </BrowserRouter>\r\n        </Provider>\r\n  </React.StrictMode>\r\n);\r\n\r\nReactDOM.render(app, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}