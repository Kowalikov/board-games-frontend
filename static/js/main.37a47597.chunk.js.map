{"version":3,"sources":["Game/Game.js","LogPanel/LogPanel.js","RegistrationPanel/RegistrationPanel.js","App.js","serviceWorker.js","index.js"],"names":["Game","props","className","onClick","click","name","playersNumber","src","img","alt","children","LogPanel","loading","this","submitting","type","onChange","changedUsername","onKeyPress","enterLogin","submit","disabled","style","marginRight","wrongLoginData","color","Component","RegistrationPanel","_handleKeyDown","e","key","register","enterRegister","unavaliableUsername","gotoLogin","App","state","games","users","usersLoaded","gamesListLoaded","isLogged","isRegistered","wantRegister","username","password","axios","defaults","headers","common","get","then","response","setState","data","event","charCode","submitRegisterHandler","a","url","fetch","method","mode","cache","body","JSON","stringify","postData","console","log","status","submitLoginHandler","map","user","logData","target","value","game","index","id","imgUrl","usernameChangeHandler","enterLoginHandler","enterRegisterHandler","gotoLoginHandler","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.37a47597.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Game.css';\r\n\r\nconst Game = (props) => {\r\n\r\nreturn (\r\n    <div className=\"Game\">\r\n        <p onClick={props.click}>I'm {props.name} and number of players is: {props.playersNumber}</p>\r\n        <img src={props.img} alt=\"\"></img>\r\n        <p>{props.children}</p>\r\n    </div>\r\n\r\n)\r\n};\r\n\r\nexport default Game;","import React, {Component} from 'react';\r\n\r\nclass LogPanel extends Component {\r\n\r\n  render (){\r\n    const loading=this.props.submitting  \r\n    return (\r\n      <div className=\"LogPanel\">\r\n          <p>Username:</p>\r\n          <input type= \"text\" onChange={this.props.changedUsername} onKeyPress={this.props.enterLogin} />\r\n          {/*<p>Password:</p>\r\n          <input type= \"password\" onChange={props.changedPassword} />*/}\r\n          <br></br>\r\n          <br></br>\r\n          \r\n          <button className=\"loginButton\" onClick={this.props.submit} disabled={loading}>\r\n          {loading && (<i\r\n                className=\"fa fa-refresh fa-spin\"\r\n                style={{ marginRight: \"5px\" }}\r\n              />\r\n            )}\r\n            {loading && <span>Logging in</span>}\r\n            {!loading && <span>Log in</span>}\r\n          </button>\r\n          {this.props.wrongLoginData===true && <p style={{color:'red'}}>Wrong login data</p>}\r\n          <p>{this.props.children}</p>\r\n      </div>\r\n      );\r\n  }\r\n};\r\n\r\nexport default LogPanel;","import React, {Component} from 'react';\r\nimport './RegistrationPanel.css'\r\n\r\nclass RegistrationPanel extends Component {\r\n  _handleKeyDown = (e) => {\r\n      if (e.key === 'Enter') {\r\n        return (this.props.register) \r\n      } \r\n  }\r\n  render(){\r\n    const loading=this.props.submitting\r\n\r\n    return (\r\n      <div className=\"RegistrationPanel\">\r\n          <p>Username:</p>\r\n          <input type= \"text\" onChange={this.props.changedUsername} onKeyPress={this.props.enterRegister} />\r\n          {/*<p>Password:</p>\r\n          <input type= \"password\" onChange={this.props.changedPassword} />*/}\r\n          <br></br>\r\n          <br></br>\r\n          <button className=\"registrationButton\" onClick={this.props.register}  disabled={loading}>\r\n          {loading && (<i\r\n                className=\"fa fa-refresh fa-spin\"\r\n                style={{ marginRight: \"5px\" }}\r\n              />\r\n            )}\r\n            {loading && <span>Registering</span>}\r\n            {!loading && <span>Register</span>}\r\n          </button>\r\n          {this.props.unavaliableUsername===true && <p style={{color:'red'}}>That username is unavaliable</p>}\r\n          <p>{this.props.children}</p>\r\n          <button className=\"gotoLoginButton\" onClick={this.props.gotoLogin} >\r\n          Login screen\r\n          </button>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default RegistrationPanel;","import React, { Component } from 'react';\r\nimport Game from './Game/Game';\r\nimport axios from 'axios';\r\nimport LogPanel from './LogPanel/LogPanel';\r\nimport RegistrationPanel from './RegistrationPanel/RegistrationPanel'\r\n//import Axios from 'axios';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state={\r\n      games:[],\r\n      users:[],\r\n      usersLoaded : false,\r\n      gamesListLoaded : false,\r\n      isLogged : false,\r\n      isRegistered: false,\r\n      wantRegister : true,\r\n      username : null,\r\n      password : null,\r\n      loading : false,\r\n      wrongLoginData : false,\r\n      unavaliableUsername : false\r\n\r\n    }\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    //let uTest='https://rickandmortyapi.com/api/character/187'\r\n    let uGamesList='https://cors-anywhere.herokuapp.com/http://boardgames1.herokuapp.com/games/?fbclid=IwAR37IdjpLC4RmLuN1wSehM1DtarmIavEGkcy7SMh-kf_lsIEVp0r3DeyaXY'\r\n    axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest'\r\n    axios.get(uGamesList)\r\n      .then(response => {\r\n        this.setState({\r\n          games:response.data,\r\n          gamesListLoaded:true\r\n        });\r\n      });\r\n\r\n    let uLog='https://boardgames1.herokuapp.com/register/'\r\n    axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest'\r\n    axios.get(uLog)\r\n      .then(response => {\r\n        this.setState({\r\n          users:response.data,\r\n          usersLoaded:true\r\n        });\r\n      });\r\n   \r\n\r\n  }\r\n\r\n  enterRegisterHandler(event) {\r\n    if (event.charCode === 13){\r\n      this.submitRegisterHandler();\r\n    }\r\n  }\r\n  \r\n  submitRegisterHandler(event) {\r\n    let uReg='https://boardgames1.herokuapp.com/register/'\r\n    const article = {\"username\": this.state.username};\r\n    \r\n    //console.log(article)\r\n\r\n    async function postData(url = '', data = {}) {\r\n      const response = await fetch(url, {\r\n        method: 'POST', // *GET, POST, PUT, DELETE, etc.\r\n        mode: 'cors', // no-cors, *cors, same-origin\r\n        cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          },\r\n        body: JSON.stringify(data) // body data type must match \"Content-Type\" header\r\n      });\r\n      return response; // parses JSON response into native JavaScript objects\r\n    }\r\n    \r\n    let resStatus = postData(uReg, article).then(\r\n      response => { console.log(response.status);\r\n        if( response.status === 201){\r\n        console.log(\"Zarejestrowany\");\r\n        this.setState({\r\n          usersLoaded:true,\r\n          isLogged: true,\r\n          unavaliableUsername : false,\r\n          isRegistered: true\r\n        });\r\n      }\r\n      else if (response.status === 400){\r\n        this.setState({unavaliableUsername: true});\r\n        console.log(\"Zła nazwa\");\r\n      }\r\n      else{\r\n        console.log(\"Problem z łącznością z serwerem\");\r\n      }\r\n    });\r\n  }\r\n\r\n  enterLoginHandler(event) {\r\n    if (event.charCode === 13){\r\n      this.submitLoginHandler();\r\n    }\r\n  }\r\n\r\n  submitLoginHandler(event) {\r\n    this.setState({ loading: true });\r\n    \r\n    const username = this.state.username;\r\n    //const users = this.state.users\r\n\r\n    this.state.users.map(user => { \r\n      if (username===user.username){\r\n        this.setState({ loading: false });\r\n        this.setState({isLogged: true});\r\n        this.setState({wrongLoginData : false})\r\n      };\r\n    });\r\n    if (this.state.isLogged===false){\r\n      this.setState({ loading: false });\r\n      this.setState({wrongLoginData : true});\r\n    }\r\n  }\r\n\r\n  usernameChangeHandler(event) {\r\n    const logData = {\r\n      ...this.state\r\n    };\r\n    logData.username = event.target.value;\r\n    this.setState({username: logData.username})\r\n  }\r\n\r\n  passwordChangeHandler(event) {\r\n    const logData = {\r\n      ...this.state\r\n    };\r\n    logData.password = event.target.value;\r\n    this.setState({password: logData.password})\r\n  }\r\n\r\n  gotoLoginHandler(event) {\r\n    const logData = {\r\n      ...this.state\r\n    };\r\n    logData.wantRegister = false;\r\n    this.setState({wantRegister: logData.wantRegister})\r\n  }\r\n \r\n\r\n\r\n  render () {\r\n\r\n    const style = {\r\n      color: '#0D0A0B',\r\n    };\r\n\r\n    const games = this.state.games.map((game, index) => { \r\n      return <Game \r\n        name={game.name}\r\n        key={game.id}\r\n        playersNumber={game.playersNumber}\r\n        img={game.imgUrl}\r\n        //click={() => this.props.clicked(index)}\r\n        />;\r\n    });\r\n\r\n    //var {gamesListLoaded, gs} = this.setState;\r\n\r\n    if(this.state.wantRegister===false && this.state.isRegistered===false && this.state.isLogged===false){\r\n      return(\r\n        <div className=\"App\">\r\n          <h1 style={style} >Hi, welcome to BoardGames!</h1>\r\n          <LogPanel\r\n          changedUsername={(event)=> this.usernameChangeHandler(event)}\r\n          /*changedPassword={(event)=> this.passwordChangeHandler(event)}*/\r\n          submit={(event) =>this.submitLoginHandler(event)}\r\n          enterLogin={(event) => this.enterLoginHandler(event)}\r\n          submitting={this.state.loading}\r\n          wrongLoginData={this.state.wrongLoginData}></LogPanel>\r\n        </div>\r\n      );\r\n    }\r\n    else if (this.state.wantRegister===true && this.state.isLogged===false && this.state.isRegistered===false ) {\r\n      return(\r\n        <div className=\"App\">\r\n          <h1 style={style} >Hi, welcome to BoardGames!</h1>\r\n          <RegistrationPanel\r\n          changedUsername={(event)=> this.usernameChangeHandler(event)}\r\n          /*changedPassword={(event)=> this.passwordChangeHandler(event)}*/\r\n          register={(event) =>this.submitRegisterHandler(event)}\r\n          enterRegister={(event) => this.enterRegisterHandler(event)}\r\n          submitting={this.state.loading}\r\n          gotoLogin={(event) => this.gotoLoginHandler(event)}\r\n          unavaliableUsername={this.state.unavaliableUsername}></RegistrationPanel>\r\n        </div>\r\n      );\r\n    }\r\n    else if (this.state.gamesListLoaded===false || this.state.usersLoaded===false ) {\r\n      return <div>Loading..</div>;\r\n    }\r\n    else{\r\n      return (\r\n        <div className=\"App\">\r\n          <h1 style={style} >Hi {this.state.username}, welcome to BoardGames!</h1>\r\n          <h1 style={style}> That's your games:</h1>\r\n          {games}\r\n\r\n        </div>\r\n    );\r\n    }  \r\n  }\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}